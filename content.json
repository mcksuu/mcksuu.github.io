[{"title":"Android 事件统计","date":"2017-03-17T13:00:51.758Z","path":"2017/03/17/Android-Listener/","text":"1.&#x5199;&#x5728;&#x524D;&#x9762;&#x7684;&#x8BDD; &#x6700;&#x8FD1;&#x90FD;&#x5728;&#x770B;framework&#x7684;&#x4E1C;&#x897F;&#xFF0C;&#x4E5F;&#x51E0;&#x5929;&#x6CA1;&#x6709;&#x5199;&#x4EC0;&#x4E48;&#x4E1C;&#x897F;&#xFF0C;&#x4ECA;&#x5929;&#x6709;&#x70B9;&#x65F6;&#x95F4;&#x5199;&#x4E0B;&#x4E0A;&#x6B21;&#x9762;&#x8BD5;&#x9047;&#x5230;&#x7684;&#x4E00;&#x4E2A;&#x95EE;&#x9898;&#x3002;&#x95EE;&#x9898;&#x5927;&#x6982;&#x662F;&#x8FD9;&#x6837;&#x7684;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x9700;&#x8981;&#x7EDF;&#x8BA1;&#x9875;&#x9762;&#x7684;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#xFF0C;&#x5373;&#x6DFB;&#x52A0;&#x57CB;&#x70B9;&#x8FDB;&#x884C;&#x7EDF;&#x8BA1;&#xFF0C;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#xFF1F;&#x6211;&#x5F53;&#x65F6;&#x56DE;&#x7B54;&#x7684;&#x662F;&#x53CD;&#x5C04;&#x52A0;&#x4EE3;&#x7406;&#x53BB;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x529F;&#x80FD;&#x3002;&#x6709;&#x670B;&#x53CB;&#x8BF4;&#xFF0C;&#x8FD9;&#x4E0D;&#x662F;&#x5F88;&#x7B80;&#x5355;&#x561B;&#xFF0C;&#x76F4;&#x63A5;&#x7528;&#x4EE3;&#x7406;&#x6A21;&#x5F0F;&#x5C31;OK&#x4E86;&#x554A;&#xFF0C;&#x5E72;&#x561B;&#x8FD8;&#x53CD;&#x5C04;&#x3002;&#x7684;&#x786E;&#xFF0C;&#x5982;&#x679C;&#x5728;&#x9879;&#x76EE;&#x521D;&#x671F;&#x5C31;&#x786E;&#x5B9A;&#x4E86;&#x8FD9;&#x4E2A;&#x9700;&#x6C42;&#x7684;&#x8BDD;&#xFF0C;&#x6211;&#x60F3;&#x5927;&#x90E8;&#x5206;&#x4EBA;&#x90FD;&#x4F1A;&#x60F3;&#x5230;&#x7528;&#x4EE3;&#x7406;&#x6A21;&#x5F0F;&#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x529F;&#x80FD;&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x9879;&#x76EE;&#x5DF2;&#x7ECF;&#x7A33;&#x5B9A;&#x8FD0;&#x884C;&#x4E86;&#x4E00;&#x6BB5;&#x65F6;&#x95F4;&#x5462;&#xFF1F;&#x6211;&#x4EEC;&#x4E0D;&#x53EF;&#x80FD;&#x628A;&#x6BCF;&#x4E2A;&#x4E8B;&#x4EF6;&#x90FD;&#x91CD;&#x65B0;&#x66FF;&#x6362;&#x6210;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7406;&#x7C7B;&#x5427;&#xFF1F;&#x8FD9;&#x6837;&#x91CD;&#x590D;&#x7684;&#x5DE5;&#x4F5C;&#x592A;&#x6CA1;&#x6709;&#x6548;&#x7387;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x52A0;&#x4EE3;&#x7406;&#x6280;&#x672F;&#x6765;&#x5B9E;&#x73B0;&#x8FD9;&#x4E2A;&#x529F;&#x80FD;&#x3002; 2.&#x53CD;&#x5C04;&#x548C;&#x4EE3;&#x7406; &#x53CD;&#x5C04;&#x673A;&#x5236;&#x662F;&#x5728;&#x8FD0;&#x884C;&#x72B6;&#x6001;&#x4E2D;&#xFF0C;&#x5BF9;&#x4E8E;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;&#x90FD;&#x80FD;&#x591F;&#x77E5;&#x9053;&#x8FD9;&#x4E2A;&#x7C7B;&#x7684;&#x6240;&#x6709;&#x5C5E;&#x6027;&#x548C;&#x65B9;&#x6CD5;&#xFF1B;&#x5BF9;&#x4E8E;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#xFF0C;&#x90FD;&#x80FD;&#x591F;&#x8C03;&#x7528;&#x5B83;&#x7684;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x65B9;&#x6CD5;&#x548C;&#x5C5E;&#x6027;&#xFF1B; &#x5728;&#x8FD0;&#x884C;&#x65F6;&#x5224;&#x65AD;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x6240;&#x5C5E;&#x7684;&#x7C7B;&#xFF1B; &#x5728;&#x8FD0;&#x884C;&#x65F6;&#x6784;&#x9020;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x7C7B;&#x7684;&#x5BF9;&#x8C61;&#xFF1B; &#x5728;&#x8FD0;&#x884C;&#x65F6;&#x5224;&#x65AD;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x7C7B;&#x6240;&#x5177;&#x6709;&#x7684;&#x6210;&#x5458;&#x53D8;&#x91CF;&#x548C;&#x65B9;&#x6CD5;&#xFF1B; &#x5728;&#x8FD0;&#x884C;&#x65F6;&#x8C03;&#x7528;&#x4EFB;&#x610F;&#x4E00;&#x4E2A;&#x5BF9;&#x8C61;&#x7684;&#x65B9;&#x6CD5;&#xFF1B; &#x751F;&#x6210;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x3002; &#x4E0B;&#x9762;&#x901A;&#x8FC7;&#x4E00;&#x4E2A;&#x4F8B;&#x5B50;&#x6765;&#x8BB2;&#x89E3;&#x4E0B;&#x53CD;&#x5C04;&#x7684;&#x7528;&#x9014;&#x3002; 1234567891011121314151617181920212223242526272829303132333435363738package com.nick.model;//&#x5B9A;&#x4E49;&#x4E86;&#x4E00;&#x4E2A;&#x5B9E;&#x4F53;&#x7C7B;UserModelpublic class UserModel { private String userName; private String password; private UserInfoModel userInfoModel; public String getUserName() { return userName; } public void setUserName(String userName) { this.userName = userName; } public String getPassword() { return password; } public void setPassword(String password) { this.password = password; } public UserInfoModel getUserInfoModel() { return userInfoModel; } public void setUserInfoModel(UserInfoModel userInfoModel) { this.userInfoModel = userInfoModel; } @Override public String toString() { String result = &quot;userName = &quot; + userName + &quot; password = &quot; + password + &quot; &quot; + userInfoModel.toString(); return result; }} &#x53E6;&#x4E00;&#x4E2A;Model 123456789101112131415161718192021222324252627package com.nick.model;public class UserInfoModel { private int age; private String birth; public int getAge() { return age; } public void setAge(int age) { this.age = age; } public String getBirth() { return birth; } public void setBirth(String birth) { this.birth = birth; } @Override public String toString() { return &quot;age = &quot; + age + &quot; birth = &quot; + birth; }} 123456789101112131415161718192021222324252627282930public static void main(String[] args) { UserInfoModel userInfoModel = new UserInfoModel(); userInfoModel.setAge(10); userInfoModel.setBirth(&quot;2017-03-17 17:08:56&quot;); UserModel userModel = new UserModel(); userModel.setUserName(&quot;&#x5C0F;&#x7EA2;&quot;); userModel.setPassword(&quot;password&quot;); userModel.setUserInfoModel(userInfoModel); System.out.println(userModel.toString()); // &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x4FEE;&#x6539;&#x5C5E;&#x6027; try { Class userModelRe = Class.forName(UserModel.class.getName()); Field userName = userModelRe.getDeclaredField(&quot;userName&quot;); userName.setAccessible(true);// setAccessible(true)&#x7684;&#x65B9;&#x5F0F;&#x5173;&#x95ED;&#x5B89;&#x5168;&#x68C0;&#x67E5;&#x5C31;&#x53EF;&#x4EE5;&#x8FBE;&#x5230;&#x63D0;&#x5347;&#x53CD;&#x5C04;&#x901F;&#x5EA6;&#x7684;&#x76EE;&#x7684; userName.set(userModel, &quot;&#x5C0F;&#x660E;&quot;); } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (NoSuchFieldException e) { e.printStackTrace(); } catch (SecurityException e) { e.printStackTrace(); } catch (IllegalArgumentException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } System.out.println(userModel.toString()); } &#x8FD0;&#x884C;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A; &#x4EE3;&#x7406;&#x6A21;&#x5F0F;&#x7684;&#x8BDD;&#x5206;&#x4E3A;&#x52A8;&#x6001;&#x4EE3;&#x7406;&#x548C;&#x9759;&#x6001;&#x4EE3;&#x7406;&#xFF0C;&#x6211;&#x4EEC;&#x8FD9;&#x91CC;&#x4F7F;&#x7528;&#x5230;&#x4E86;&#x9759;&#x6001;&#x4EE3;&#x7406;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x505A;&#x8FC7;&#x591A;&#x8D58;&#x8FF0;&#x3002; 3. &#x51C6;&#x5907;&#x5DE5;&#x4F5C; &#x9996;&#x5148;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x6E90;&#x7801;&#x6765;&#x770B;&#x6211;&#x4EEC;&#x7684;&#x70B9;&#x51FB;&#x4E8B;&#x4EF6;&#x662F;&#x5982;&#x4F55;&#x6267;&#x884C;&#x7684;&#xFF0C;&#x6211;&#x4EEC;&#x5148;&#x770B;setOnClickListener&#x600E;&#x4E48;&#x5B9E;&#x73B0;&#xFF1A;123456public void setOnClickListener(@Nullable OnClickListener l) { if (!isClickable()) { setClickable(true); } getListenerInfo().mOnClickListener = l;} &#x8FD9;&#x91CC;&#x5F88;&#x7B80;&#x5355;&#xFF0C;&#x5C31;&#x662F;&#x628A;&#x6211;&#x4EEC;&#x7684;OnClickListener&#x8D4B;&#x503C;&#x7ED9;listenerInfo&#x5BF9;&#x50CF;&#x7684;mOnClickListener&#x3002;&#x7B80;&#x5355;&#x8BF4;&#x4E0B;&#xFF0C;&#x8FD9;&#x91CC;&#x8FDB;&#x884C;&#x4E86; isClickable() &#x5224;&#x65AD;&#xFF0C;&#x5982;&#x679C;&#x4E0D;&#x53EF;&#x4EE5;&#x70B9;&#x51FB;&#xFF0C;&#x5C31;&#x8BBE;&#x7F6E;&#x4E3A;&#x53EF;&#x70B9;&#x51FB;&#x3002;&#x63A5;&#x7740;&#x6211;&#x4EEC;&#x770B;&#x4E0B;listenerInfo&#x53C8;&#x662F;&#x4EC0;&#x4E48;&#x9B3C;&#xFF1A; 123456789101112131415161718192021222324252627282930313233343536373839ListenerInfo getListenerInfo() { if (mListenerInfo != null) { return mListenerInfo; } mListenerInfo = new ListenerInfo(); return mListenerInfo;}static class ListenerInfo { protected OnFocusChangeListener mOnFocusChangeListener; private ArrayList&lt;OnLayoutChangeListener&gt; mOnLayoutChangeListeners; protected OnScrollChangeListener mOnScrollChangeListener; private CopyOnWriteArrayList&lt;OnAttachStateChangeListener&gt; mOnAttachStateChangeListeners; public OnClickListener mOnClickListener; protected OnLongClickListener mOnLongClickListener; protected OnContextClickListener mOnContextClickListener; protected OnCreateContextMenuListener mOnCreateContextMenuListener; private OnKeyListener mOnKeyListener; private OnTouchListener mOnTouchListener; private OnHoverListener mOnHoverListener; private OnGenericMotionListener mOnGenericMotionListener; private OnDragListener mOnDragListener; private OnSystemUiVisibilityChangeListener mOnSystemUiVisibilityChangeListener; OnApplyWindowInsetsListener mOnApplyWindowInsetsListener;} &#x901A;&#x8FC7;&#x6E90;&#x7801;&#x53EF;&#x4EE5;&#x770B;&#x5230;&#xFF0C;ListenerInfo&#x662F;&#x4E00;&#x4E9B;&#x4E8B;&#x4EF6;&#x76D1;&#x542C;&#x7684;&#x7C7B;&#x3002;&#x90A3;&#x6211;&#x4EEC;&#x7684;OnClick&#x53C8;&#x662F;&#x5728;&#x54EA;&#x91CC;&#x8C03;&#x7528;&#x7684;&#x5462;&#xFF1F; 123456789101112131415161718192021private final class PerformClick implements Runnable { @Override public void run() { performClick(); }}public boolean performClick() { final boolean result; final ListenerInfo li = mListenerInfo; if (li != null &amp;&amp; li.mOnClickListener != null) { playSoundEffect(SoundEffectConstants.CLICK); li.mOnClickListener.onClick(this); result = true; } else { result = false; } sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED); return result;} &#x53EF;&#x4EE5;&#x770B;&#x5230;&#x662F;&#x7528;&#x8FC7;PerformClick&#x8FD9;&#x4E2A;&#x65B9;&#x6CD5;&#x53BB;&#x8C03;&#x7528;&#x7684;&#xFF0C;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x6765;&#x4E86;&#xFF0C;&#x8FD9;&#x4E2A;PerformClick&#x53C8;&#x5728;&#x54EA;&#x91CC;&#x8C03;&#x7528;&#x4E86;&#x5462;&#xFF1F;&#x8FD8;&#x662F;&#x7EE7;&#x7EED;&#x770B;&#x6E90;&#x7801;&#xFF1A; 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061public boolean onTouchEvent(MotionEvent event) { if (((viewFlags &amp; CLICKABLE) == CLICKABLE || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) { switch (action) { case MotionEvent.ACTION_UP: boolean prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != 0; if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0 || prepressed) { // take focus if we don&apos;t have it already and we should in // touch mode. boolean focusTaken = false; if (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) { focusTaken = requestFocus(); } if (prepressed) { // The button is being released before we actually // showed it as pressed. Make it show the pressed // state now (before scheduling the click) to ensure // the user sees it. setPressed(true, x, y); } if (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) { // This is a tap, so remove the longpress check removeLongPressCallback(); // Only perform take click actions if we were in the pressed state if (!focusTaken) { // Use a Runnable and post this rather than calling // performClick directly. This lets other visual state // of the view update before click actions start. if (mPerformClick == null) { mPerformClick = new PerformClick(); } if (!post(mPerformClick)) { performClick(); } } } if (mUnsetPressedState == null) { mUnsetPressedState = new UnsetPressedState(); } if (prepressed) { postDelayed(mUnsetPressedState, ViewConfiguration.getPressedStateDuration()); } else if (!post(mUnsetPressedState)) { // If the post failed, unpress right now mUnsetPressedState.run(); } removeTapCallback(); } mIgnoreNextUpEvent = false; break; ... ... } &#x4ECE;&#x4EE3;&#x7801;&#x91CC;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x5230;performClick&#x662F;&#x5728;onTouchEvent&#x4E2D;&#x7684;MotionEvent.ACTION_UP&#x8FDB;&#x884C;&#x5224;&#x65AD;&#x5E76;&#x6267;&#x884C;&#x3002;&#x597D;&#x50CF;&#x6709;&#x70B9;&#x626F;&#x8FDC;&#x4E86;&#xFF0C;&#x56DE;&#x8FC7;&#x5934;&#x6765;&#x6211;&#x4EEC;&#x770B;&#x4E0B;&#x5E94;&#x8BE5;&#x600E;&#x6837;&#x53BB;&#x53CD;&#x5C04;&#x83B7;&#x5F97;mListenerInfo&#x8FD9;&#x4E2A;&#x5C5E;&#x6027;&#xFF0C;&#x5E76;&#x4E14;&#x83B7;&#x5F97;mListenerInfo&#x4E2D;&#x7684;mOnClickListener,&#x7136;&#x540E;&#x5C06;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7406;&#x7C7B;&#x8D4B;&#x503C;&#x8FDB;&#x53BB;&#x3002; 4.&#x4EE3;&#x7801;&#x5B9E;&#x73B0; &#x539F;&#x7406;&#x4E0A;&#x9762;&#x6211;&#x4EEC;&#x90FD;&#x8BB2;&#x4E86;&#xFF0C;&#x4E0B;&#x9762;&#x5C31;&#x662F;&#x4EE3;&#x7801;&#x7684;&#x5B9E;&#x73B0;&#x90E8;&#x5206;&#xFF1A; 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889public class HookUtils { private static final String VIEW_CLASS = &quot;android.view.View&quot;; /** * @param mActivity * @param onClickListener */ public static void hookListener(Activity mActivity, OnClickListener onClickListener) { if (mActivity != null) { View decorView = mActivity.getWindow().getDecorView(); getView(decorView, onClickListener); } } /** * &#x9012;&#x5F52;&#x8FDB;&#x884C;viewHook * @param view * @param onClickListener */ private static void getView(View view, OnClickListener onClickListener) { //&#x9012;&#x5F52;&#x904D;&#x5386;&#xFF0C;&#x5224;&#x65AD;&#x5F53;&#x524D;view&#x662F;&#x4E0D;&#x662F;ViewGroup&#xFF0C;&#x5982;&#x679C;&#x662F;&#x7EE7;&#x7EED;&#x904D;&#x5386;&#xFF0C;&#x77E5;&#x9053;&#x4E0D;&#x662F;&#x4E3A;&#x6B62; if (view instanceof ViewGroup) { for (int i = 0; i &lt; ((ViewGroup) view).getChildCount(); i++) { getView(((ViewGroup) view).getChildAt(i), onClickListener); } } viewHook(view, onClickListener); } /** * &#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x5C06;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7406;&#x7C7B;&#x66FF;&#x6362;&#x539F;&#x6765;&#x7684;onClickListener * * @param view * @param onClickListener */ private static void viewHook(View view, OnClickListener onClickListener) { try { Class viewClass = Class.forName(VIEW_CLASS);//&#x53CD;&#x5C04;&#x521B;&#x5EFA;View Field listenerInfoField = viewClass.getDeclaredField(&quot;mListenerInfo&quot;);//&#x83B7;&#x5F97;View&#x5C5E;&#x6027;mListenerInfo listenerInfoField.setAccessible(true); Object mListenerInfo = listenerInfoField.get(view);//ListenerInfo==&gt;&gt;View&#x5BF9;&#x8C61;&#x4E2D;&#x7684;mListenerInfo&#x7684;&#x5B9E;&#x4F8B; if (mListenerInfo != null) { Class listenerInfo2 = Class.forName(&quot;android.view.View$ListenerInfo&quot;);//&#x53CD;&#x5C04;&#x521B;&#x5EFA;ListenerInfo Field onClickListenerFiled = listenerInfo2.getDeclaredField(&quot;mOnClickListener&quot;);//&#x83B7;&#x5F97;ListenerInfo&#x5C5E;&#x6027;mOnClickListener onClickListenerFiled.setAccessible(true); View.OnClickListener o1 = (View.OnClickListener) onClickListenerFiled.get(mListenerInfo);//&#x83B7;&#x5F97;mListenerInfo&#x7684;&#x5B9E;&#x4F8B;&#x4E2D;&#x7684;mOnClickListener&#x5B9E;&#x4F8B; if (o1 != null) { View.OnClickListener onClickListenerProxy = new OnClickListenerProxy(o1, onClickListener); onClickListenerFiled.set(mListenerInfo, onClickListenerProxy);//&#x8BBE;&#x7F6E;ListenerInfo&#x5C5E;&#x6027;mOnClickListener&#x4E3A;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7406;listener } } } catch (ClassNotFoundException e) { e.printStackTrace(); } catch (NoSuchFieldException e) { e.printStackTrace(); } catch (IllegalAccessException e) { e.printStackTrace(); } } public interface OnClickListener { void beforeInListener(View v); void afterInListener(View v); } private static class OnClickListenerProxy implements View.OnClickListener { private View.OnClickListener object; private HookUtils.OnClickListener mListener; public OnClickListenerProxy(View.OnClickListener object, HookUtils.OnClickListener listener) { this.object = object; this.mListener = listener; } @Override public void onClick(View v) { if (mListener != null) { mListener.beforeInListener(v); } if (object != null) { object.onClick(v); } if (mListener != null) { mListener.afterInListener(v); } } } &#x4EE3;&#x7801;&#x91CC;&#x5DF2;&#x7ECF;&#x6709;&#x5F88;&#x8BE6;&#x7EC6;&#x7684;&#x6CE8;&#x91CA;&#x4E86;&#xFF0C;&#x8FD9;&#x91CC;&#x5927;&#x6982;&#x89E3;&#x91CA;&#x4E0B;&#xFF1A;&#x6211;&#x4EEC;&#x901A;&#x8FC7;&#x53CD;&#x5C04;&#x83B7;&#x5F97;&#x4E86;&#x5F53;&#x524D;View&#x7684;mListenerInfo&#x8FD9;&#x4E2A;&#x5C5E;&#x6027;&#xFF0C;&#x5982;&#x679C;mListenerInfo&#x4E0D;&#x4E3A;&#x7A7A;&#x7684;&#x65F6;&#x5019;,&#x6211;&#x4EEC;&#x83B7;&#x5F97;mListenerInfo&#x4E2D;&#x7684;mOnClickListener,&#x7136;&#x540E;&#x5C06;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7406;&#x7C7B;&#x8D4B;&#x503C;&#x8FDB;&#x53BB;&#x3002;&#x5F53;&#x8C03;&#x7528;onClick&#x65B9;&#x6CD5;&#x65F6;&#xFF0C;&#x4F1A;&#x5148;&#x8C03;&#x7528;&#x6211;&#x4EEC;&#x7684;beforeInListener&#x4E4B;&#x540E;&#x662F;onClick&#x65B9;&#x6CD5;&#xFF0C;&#x6700;&#x540E;&#x8C03;&#x7528;afterInListener&#x3002; 5.&#x6D4B;&#x8BD5;123456789101112131415161718192021222324252627282930@Override protected void onCreate(Bundle savedInstanceState) { super.onCreate(savedInstanceState); setContentView(R.layout.activity_main); View view = findViewById(R.id.tv_1); view.setTag(&quot;1&quot;); view.setOnClickListener(this); View view1 = findViewById(R.id.tv_2); view1.setTag(&quot;2&quot;); view1.setOnClickListener(this); View view2 = findViewById(R.id.tv_3); view2.setTag(&quot;3&quot;); view2.setOnClickListener(this); HookUtils.hookListener(this, this);//&#x8981;&#x5728;setOnxxxListener&#x4E4B;&#x540E;&#x8C03;&#x7528; } @Override public void onClick(View v) { Log.d(&quot;fxxk&quot;, &quot;&#x70B9;&#x51FB;id=&quot; + v.getId() + &quot;v===&quot; + v.getTag().toString()); } @Override public void beforeInListener(View v) { Log.d(&quot;fxxk&quot;, &quot;&#x70B9;&#x51FB;&#x524D;id=&quot; + v.getId() + &quot;v===&quot; + v.getTag().toString()); } @Override public void afterInListener(View v) { Log.d(&quot;fxxk&quot;, &quot;&#x70B9;&#x51FB;&#x540E;id=&quot; + v.getId() + &quot;v===&quot; + v.getTag().toString()); } &#x6EE1;&#x6000;&#x671F;&#x5F85;&#x7684;&#x7ED3;&#x679C;&#xFF1A; 6. &#x5199;&#x5728;&#x6700;&#x540E; &#x8FD9;&#x4E2A;&#x4EE3;&#x7801;&#x867D;&#x7136;&#x6BD4;&#x8F83;&#x5C11;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x8FD9;&#x91CC;&#x53EA;&#x5B9E;&#x73B0;&#x4E86;&#x5BF9;OnclickListener&#x7684;&#x76D1;&#x542C;&#xFF0C;&#x6211;&#x5C06;&#x4EE3;&#x7801;&#x4E0A;&#x4F20;&#x5230;GitHub&#xFF0C;&#x5E0C;&#x671B;&#x6709;&#x65F6;&#x95F4;&#x80FD;&#x591F;&#x5C06;&#x5176;&#x4ED6;&#x4E8B;&#x4EF6;&#x7684;&#x76D1;&#x542C;&#x4E5F;&#x5B8C;&#x6210;&#x3002;&#x4E0B;&#x9762;&#x5E94;&#x8BE5;&#x662F;&#x5BF9;Looper&#x548C;Handler&#x8FDB;&#x884C;&#x5206;&#x6790;&#xFF0C;&#x62BD;&#x7A7A;&#x5199;&#x4E0B;&#x81EA;&#x5DF1;&#x7684;&#x7406;&#x89E3;&#x3002;","tags":[]},{"title":"Android NDK之增量更新","date":"2017-02-28T16:10:09.345Z","path":"2017/03/01/android-bsdiff1/","text":"1.&#x589E;&#x91CF;&#x66F4;&#x65B0;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x5E93;bsdiff&#x548C;bzip2 bsdiff&#x5E93;&#x662F;&#x4E00;&#x4E2A;&#x5F00;&#x6E90;&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#x5DEE;&#x5206;&#x5DE5;&#x5177;&#xFF0C;&#x901A;&#x8FC7;&#x5BF9;&#x6BD4;Apk&#x7684;&#x4E8C;&#x8FDB;&#x5236;&#xFF0C;&#x4ECE;&#x800C;&#x8FDB;&#x884C;&#x5DEE;&#x5206;&#x5305;&#x7684;&#x751F;&#x6210;&#x3002;bsdiff&#x5E93;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x5B98;&#x7F51;&#xFF1A;bsdiff&#x4E0B;&#x8F7D;&#x5730;&#x5740;&#xFF1A;&#x5DF2;&#x7ECF;&#x5C06;&#x7528;&#x5230;&#x7684;bsdiff&#x548C;bzip&#x4E0A;&#x4F20;&#x5230;&#x767E;&#x5EA6;&#x4E91; &#x3002; 2.AS&#x521B;&#x5EFA;&#x9879;&#x76EE;&#xFF0C;&#x5E76;&#x5BFC;&#x5165;&#x5934;&#x6587;&#x4EF6; &#x672C;&#x9879;&#x76EE;&#x4F7F;&#x7528;Android Studio&#xFF0C;&#x901A;&#x8FC7;cmake&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#x3002;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x5DE5;&#x5177;&#x7C7B;&#xFF0C;&#x8FDB;&#x884C;&#x5DEE;&#x5206;&#x5305;&#x7684;&#x751F;&#x6210;&#x53CA;&#x5408;&#x5E76;Diffutils1234567891011121314151617181920212223 public class Diffutils { static { System.loadLibrary(&quot;native-lib&quot;); } /** * @param oldPath &#x65E7;&#x7684;&#x5B89;&#x88C5;&#x5305;&#x8DEF;&#x5F84; * @param newPath &#x65B0;&#x7684;&#x5B89;&#x88C5;&#x5305;&#x8DEF;&#x5F84; * @param patchPath &#x5DEE;&#x5206;&#x5305;&#x8DEF;&#x5F84; * @return &#x751F;&#x6210;&#x7684;&#x7ED3;&#x679C; */ public static native int generateDiffApk(String oldPath, String newPath, String patchPath); /** * @param oldPath &#x65E7;&#x7684;&#x5B89;&#x88C5;&#x5305;&#x8DEF;&#x5F84; * @param newPath &#x65B0;&#x7684;&#x5B89;&#x88C5;&#x5305;&#x8DEF;&#x5F84; * @param patchPath &#x5DEE;&#x5206;&#x5305;&#x8DEF;&#x5F84; * @return &#x751F;&#x6210;&#x7684;&#x7ED3;&#x679C; */ public static native int mergeDiffApk(String oldPath, String newPath, String patchPath);} &#x5BFC;&#x5165;bsdiff&#x548C;bzip2&#x7684;&#x5934;&#x6587;&#x4EF6;&#x4EE5;&#x53CA;.c&#x6587;&#x4EF6;&#x5C06;&#x751F;&#x6210;&#x7684;.cpp&#x6587;&#x4EF6;&#x6539;&#x6210;.c&#x6587;&#x4EF6;&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4FEE;&#x6539;&#x6210;.c&#x6587;&#x4EF6;&#xFF1F;&#x4E3B;&#x8981;&#x662F;&#x56E0;&#x4E3A;c&#x548C;c++&#x5BF9;void malloc&#x8FD9;&#x4E2A;&#x51FD;&#x6570;&#x7F16;&#x8BD1;&#x4E0D;&#x540C;&#xFF0C;c&#x4E2D;&#x4E0D;&#x7528;&#x5C06;&#x7ED3;&#x679C;&#x5F3A;&#x5236;&#x8F6C;&#x6362;&#x6210;&#x7C7B;&#x578B; &#xFF0C;&#x800C;c++&#x5219;&#x4E0D;&#x540C;&#xFF0C;&#x5B83;&#x5FC5;&#x987B;&#x8981;&#x5C06;&#x7ED3;&#x679C;&#x5F3A;&#x5236;&#x8F6C;&#x6362;&#x6210;&#x7C7B;&#x578B;*&#x3002;&#x6211;&#x4EEC;&#x4F7F;&#x7528;&#x5230;&#x7684;bsdiff&#x5E93;&#x548C;bzip2&#x5E93;&#x597D;&#x591A;&#x5730;&#x65B9;&#x90FD;&#x4F7F;&#x7528;&#x4E86;malloc&#x51FD;&#x6570;&#xFF0C;&#x5982;&#x679C;&#x4F7F;&#x7528;c++&#x7F16;&#x8BD1;&#x4F1A;&#x62A5;&#x5927;&#x91CF;&#x7684;&#x9519;&#x8BEF;&#xFF0C;&#x56E0;&#x6B64;&#x6211;&#x4EEC;&#x91C7;&#x7528;c&#x7F16;&#x8BD1;&#x3002;&#x4FEE;&#x6539;&#x4E86;cpp&#x6587;&#x4EF6;&#x6211;&#x4EEC;&#x4E0D;&#x8981;&#x5FD8;&#x8BB0;&#x5728;CMakeList&#x4E2D;&#x8FDB;&#x884C;&#x66F4;&#x65B0;&#x4EE5;&#x53CA;&#x5BFC;&#x5165;&#x65B0;&#x7684;&#x6587;&#x4EF6;CMakeList.txt1234567891011121314151617181920212223242526272829303132333435363738394041424344454647# Sets the minimum version of CMake required to build the native# library. You should either keep the default value or only pass a# value of 3.4.0 or lower.cmake_minimum_required(VERSION 3.4.1)# Creates and names a library, sets it as either STATIC# or SHARED, and provides the relative paths to its source code.# You can define multiple libraries, and CMake builds it for you.# Gradle automatically packages shared libraries with your APK.add_library( # Sets the name of the library. native-lib # Sets the library as a shared library. SHARED # Provides a relative path to your source file(s). # Associated headers in the same location as their source # file are automatically included. src/main/cpp/native-lib.c )#include src/main/cpp/include&#x76EE;&#x5F55;&#x4E0B;&#x7684;&#x6240;&#x6709;&#x6587;&#x4EF6;include_directories(src/main/cpp/include)# Searches for a specified prebuilt library and stores the path as a# variable. Because system libraries are included in the search path by# default, you only need to specify the name of the public NDK library# you want to add. CMake verifies that the library exists before# completing its build.find_library( # Sets the name of the path variable. log-lib # Specifies the name of the NDK library that # you want CMake to locate. log )# Specifies libraries CMake should link to your target library. You# can link multiple libraries, such as libraries you define in the# build script, prebuilt third-party libraries, or system libraries.target_link_libraries( # Specifies the target library. native-lib # Links the target library to the log library # included in the NDK. ${log-lib} ) 3. &#x5DEE;&#x5206;&#x65B9;&#x6CD5;&#x4EE5;&#x53CA;&#x5408;&#x5E76;&#x65B9;&#x6CD5;&#x7684;&#x5B9E;&#x73B0; &#x5DEE;&#x5206;&#x7684;&#x65B9;&#x6CD5;&#x5728;bsdiff.c&#x7684;main&#x51FD;&#x6570;&#x5DF2;&#x7ECF;&#x5B9E;&#x73B0;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x4E3A;&#x4E86;&#x533A;&#x5206;&#x5DEE;&#x5206;&#x65B9;&#x6CD5;&#x548C;&#x5408;&#x5E76;&#x65B9;&#x6CD5;&#x6211;&#x5C06;main&#x51FD;&#x6570;&#x4FEE;&#x6539;&#x6210;generateDiffApk&#x3002;&#x540C;&#x7406;&#x5408;&#x5E76;&#x65B9;&#x6CD5;&#x5728;bspatch&#x4E2D;&#x5DF2;&#x7ECF;&#x5B9E;&#x73B0;&#xFF0C;&#x6211;&#x5C06;&#x5176;main&#x51FD;&#x6570;&#x4FEE;&#x6539;&#x6210;mergeDiffApknative-lib.c1234567891011121314151617181920212223242526272829303132333435363738394041424344#include &lt;jni.h&gt;#include &quot;include/bsdiff.c&quot;#include &quot;include/bspatch.c&quot;JNIEXPORT jint JNICALLJava_com_nick_bsdiff_Diffutils_generateDiffApk(JNIEnv *env, jclass type, jstring oldPath_, jstring newPath_, jstring patchPath_) { int argc = 4; char *argv[argc]; argv[0] = (char *) &quot;bspatch&quot;; argv[1] = (char *) (*env)-&gt;GetStringUTFChars(env, oldPath_, 0); argv[2] = (char *) (*env)-&gt;GetStringUTFChars(env, newPath_, 0); argv[3] = (char *) (*env)-&gt;GetStringUTFChars(env, patchPath_, 0); jint result = generateDiffApk(argc, argv); (*env)-&gt;ReleaseStringUTFChars(env, oldPath_, argv[1]); (*env)-&gt;ReleaseStringUTFChars(env, newPath_, argv[2]); (*env)-&gt;ReleaseStringUTFChars(env, patchPath_, argv[3]); return result;}JNIEXPORT jint JNICALLJava_com_nick_bsdiff_Diffutils_mergeDiffApk(JNIEnv *env, jclass type, jstring oldPath_, jstring newPath_, jstring patchPath_) { int argc = 4; char *argv[argc]; argv[0] = (char *) &quot;bspatch&quot;; argv[1] = (char *) (*env)-&gt;GetStringUTFChars(env, oldPath_, 0); argv[2] = (char *) (*env)-&gt;GetStringUTFChars(env, newPath_, 0); argv[3] = (char *) (*env)-&gt;GetStringUTFChars(env, patchPath_, 0); printf(&quot;old apk = %s \\n&quot;, argv[1]); printf(&quot;patch = %s \\n&quot;, argv[3]); printf(&quot;new apk = %s \\n&quot;, argv[2]); jint result = mergeDiffApk(argc, argv); (*env)-&gt;ReleaseStringUTFChars(env, oldPath_, argv[1]); (*env)-&gt;ReleaseStringUTFChars(env, newPath_, argv[2]); (*env)-&gt;ReleaseStringUTFChars(env, patchPath_, argv[3]); return result;} 4.&#x6548;&#x679C;&#x5C55;&#x793A; &#x65E7;&#x7248;&#x672C;&#xFF1A;&#x751F;&#x6210;&#x7684;&#x5DEE;&#x5206;&#x5305;&#xFF08;app3.patch&#xFF09;: &#x5408;&#x5E76;&#x540E;&#x7684;&#x65B0;&#x7684;&#x5B89;&#x88C5;&#x5305;&#xFF08;app1&#xFF09;&#xFF1A;&#x5B89;&#x88C5;&#x540E;&#xFF1A; 5.&#x9879;&#x76EE;&#x5730;&#x5740; &#x6211;&#x5C06;&#x5B8C;&#x6574;&#x9879;&#x76EE;&#x4E0A;&#x4F20;&#x5230;&#x4E86;GitHub&#x4E0A;&#xFF0C;&#x6709;&#x5174;&#x8DA3;&#x7684;&#x53EF;&#x4EE5;&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x8FDB;&#x5165;&#x3002;","tags":[]},{"title":"Android 调用jepg库进行图片压缩，保持图片不失真","date":"2017-02-25T14:36:06.541Z","path":"2017/02/25/android-jpeg/","text":"1.&#x6D45;&#x8C08;&#x4E3A;&#x4EC0;&#x4E48;Android&#x548C;iOS&#x56FE;&#x7247;&#x8D28;&#x91CF;&#x5DEE;&#x8DDD;&#x90A3;&#x4E48;&#x5927;&#xFF1F; &#x9996;&#x5148;&#x6765;&#x8BF4;&#xFF0C;&#x4F5C;&#x4E3A;&#x4E00;&#x4E2A;&#x5B89;&#x5353;&#x72D7;&#xFF0C;&#x673A;&#x5668;&#x5F53;&#x7136;&#x7528;&#x7684;&#x662F;&#x5B89;&#x5353;&#x7684;&#x624B;&#x673A;&#x3002;&#x73B0;&#x5728;&#x7684;&#x5B89;&#x5353;&#x624B;&#x673A;&#x5927;&#x591A;&#x6570;&#x90FD;&#x4F1A;&#x4EE5;&#x9AD8;&#x6E05;&#x62CD;&#x7167;&#xFF0C;&#x52A8;&#x4E0D;&#x52A8;&#x5C31;&#x51E0;&#x5343;&#x4E07;&#x67D4;&#x5149;&#x76F8;&#x673A;&#x6765;&#x5438;&#x5F15;&#x5404;&#x79CD;&#x4E70;&#x5BB6;&#x3002;&#x4E70;&#x6765;&#x540E;&#xFF0C;&#x62CD;&#x7167;&#x53D1;&#x73B0;&#xFF0C;&#x54C7;&#x585E;&#x2014;&#x2014;&#x4E00;&#x5F20;&#x56FE;&#x7247;&#x597D;&#x51E0;M&#x5462;&#xFF0C;&#x4F46;&#x662F;&#x8FD8;&#x662F;&#x4E0D;&#x5982;iOS&#x7684;&#x611F;&#x89C9;&#xFF0C;iOS&#x7684;&#x56FE;&#x7247;&#x4E5F;&#x5C31;1M&#x5DE6;&#x53F3;&#x5427;&#x3002;&#x4E3A;&#x4EC0;&#x4E48;&#x4F1A;&#x6709;&#x8FD9;&#x4E48;&#x5927;&#x7684;&#x5DEE;&#x8DDD;&#x5462;&#xFF1F;&#x8FD9;&#x8981;&#x4ECE;&#x5B89;&#x5353;&#x7684;&#x8BBE;&#x8BA1;&#x521D;&#x8877;&#x6765;&#x8BF4;&#x8D77;&#xFF0C;&#x5F53;&#x65F6;&#x8C37;&#x6B4C;&#x5F00;&#x53D1;Android&#x7684;&#x65F6;&#x5019;&#xFF0C;&#x8003;&#x8651;&#x4E86;&#x5927;&#x90E8;&#x5206;&#x624B;&#x673A;&#x7684;&#x914D;&#x7F6E;&#x5E76;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x9AD8;&#xFF0C;&#x6240;&#x4EE5;&#x5BF9;&#x56FE;&#x7247;&#x5904;&#x7406;&#x662F;&#x4F7F;&#x7528;&#x7684;Skia&#x8FD9;&#x4E2A;&#x5E93;&#x3002;&#x5F53;&#x7136;&#x8FD9;&#x4E2A;&#x5E93;&#x7684;&#x5E95;&#x5C42;&#x8FD8;&#x662F;&#x662F;&#x7528;&#x7684;jpeg&#x5BF9;&#x56FE;&#x7247;&#x8FDB;&#x884C;&#x538B;&#x7F29;&#x5904;&#x7406;&#x3002;&#x4F46;&#x662F;&#x4E3A;&#x4E86;&#x80FD;&#x591F;&#x9002;&#x914D;&#x4F4E;&#x7AEF;&#x7684;&#x624B;&#x673A;&#xFF08;&#x8FD9;&#x91CC;&#x7684;&#x4F4E;&#x7AEF;&#x662F;&#x6307;&#x4EE5;&#x524D;&#x7684;&#x786C;&#x4EF6;&#x914D;&#x7F6E;&#x4E0D;&#x9AD8;&#x7684;&#x624B;&#x673A;&#xFF09;&#xFF0C;&#x6240;&#x4EE5;Skia&#x5728;&#x8FDB;&#x884C;&#x56FE;&#x7247;&#x5904;&#x7406;&#x5E76;&#x6CA1;&#x6709;&#x53BB;&#x4F7F;&#x7528;&#x538B;&#x7F29;&#x56FE;&#x50CF;&#x8FC7;&#x7A0B;&#x4E2D;&#x57FA;&#x4E8E;&#x56FE;&#x50CF;&#x6570;&#x636E;&#x8BA1;&#x7B97;&#x54C8;&#x5F17;&#x66FC;&#x8868;&#xFF08;&#x5173;&#x4E8E;&#x56FE;&#x7247;&#x538B;&#x7F29;&#x4E2D;&#x7684;&#x54C8;&#x5F17;&#x66FC;&#x8868;&#xFF0C;&#x8BF7;&#x81EA;&#x884C;&#x67E5;&#x9605;&#x76F8;&#x5173;&#x8D44;&#x6599;&#xFF09;&#xFF0C;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x8FD9;&#x91CC;&#x3002;&#x8FD9;&#x91CC;&#x9762;&#x8BE6;&#x7EC6;&#x89E3;&#x91CA;&#x4E3A;&#x4F55;Google&#x6CA1;&#x6709;&#x4F7F;&#x7528;&#x9AD8;&#x6027;&#x80FD;&#x7684;&#x538B;&#x7F29;&#xFF0C;&#x7B80;&#x5355;&#x6765;&#x8BF4;&#x5C31;&#x662F;&#x8003;&#x8651;&#x4E86;&#x5F53;&#x65F6;&#x7684;&#x624B;&#x673A;&#x786C;&#x4EF6;&#xFF0C;&#x5C06;&#x4E00;&#x4E2A;&#x538B;&#x7F29;&#x53C2;&#x6570;optimize_coding&#x8BBE;&#x7F6E;&#x4E3A;&#x4E86;false&#xFF0C;&#x4F7F;&#x5F97;&#x786C;&#x4EF6;&#x8F83;&#x4F4E;&#x7684;&#x624B;&#x673A;&#x80FD;&#x591F;&#x5F88;&#x597D;&#x7684;&#x5904;&#x7406;&#x56FE;&#x7247;&#x3002; 2. NDK&#x73AF;&#x5883;&#x4EE5;&#x53CA;Cmake&#x914D;&#x7F6E;&#xFF08;&#x7BC7;&#x5E45;&#x6709;&#x9650;&#x8FD9;&#x91CC;&#x4E0D;&#x505A;&#x8FC7;&#x591A;&#x7684;&#x63CF;&#x8FF0;&#xFF09; &#x6DFB;&#x52A0;&#x73AF;&#x5883;&#x53D8;&#x91CF; &#xFF0C;&#x5C06;&#x914D;&#x7F6E;&#x7684;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x6DFB;&#x52A0;&#x5230;&#x7CFB;&#x7EDF;&#x73AF;&#x5883;&#x53D8;&#x91CF;&#x4E2D;&#x3002;&#x628A;%NDK_HOME%;&#x6DFB;&#x52A0;&#x5230;Path&#x4E2D;&#x3002; 3. jpeg&#x5E93;&#x7684;&#x4E0B;&#x8F7D;&#x53CA;&#x7F16;&#x8BD1;.so&#x6587;&#x4EF6; &#x4E0B;&#x8F7D;libjpeg&#x5E93;&#x6E90;&#x7801;&#xFF0C;git clone&#x5730;&#x5740;1git clone git://git.linaro.org/people/tomgall/libjpeg-turbo/libjpeg-turbo.git -b linaro-android &#x5C06;clone&#x4E0B;&#x6765;&#x7684;&#x6E90;&#x7801;&#x76EE;&#x5F55;&#x6539;&#x4E3A;jni&#xFF08;&#x5373;&#x6E90;&#x76EE;&#x5F55;libjpeg-turbo&#x6539;&#x4E3A;jni&#xFF09;&#xFF0C;&#x901A;&#x8FC7;ndk&#x547D;&#x4EE4;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#xFF08;&#x9700;&#x8981;&#x914D;&#x597D;ndk&#x73AF;&#x5883;&#x53D8;&#x91CF;&#xFF0C;&#x547D;&#x4EE4;&#x884C;&#x8FDB;&#x5165;&#x4FEE;&#x6539;&#x597D;&#x7684;jni&#x76EE;&#x5F55;&#x8F93;&#x5165;&#x547D;&#x4EE4;&#x5373;&#x53EF;&#xFF09;&#xFF1A;1ndk-build APP_ABI=armeabi-v7a,armeabi &#x5728;&#x5F53;&#x524D;&#x76EE;&#x5F55;&#x4E0B;&#x751F;&#x6210;libs&#x548C;obj&#x6587;&#x4EF6;&#x5939;&#x3002;libjpeg.so&#x5C31;&#x662F;&#x6211;&#x4EEC;&#x6240;&#x9700;&#x8981;&#x7684;&#x6587;&#x4EF6;&#x3002; 4.&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;Android&#x9879;&#x76EE; &#x65B0;&#x5EFA;&#x4E00;&#x4E2A;Android&#x9879;&#x76EE;&#xFF0C;&#x5E76;&#x52FE;&#x9009;c++support&#x3002;&#x5982;&#x679C;&#x73AF;&#x5883;&#x914D;&#x7F6E;&#x597D;&#x7684;&#x8BDD;&#xFF0C;AS&#x4F1A;&#x81EA;&#x52A8;&#x751F;&#x6210;&#x4E00;&#x4E2A;&#x5305;&#x542B;NDK&#x7684;&#x9879;&#x76EE;&#xFF0C;&#x91CC;&#x9762;&#x5B9E;&#x73B0;&#x4E86;hello world&#x3002;&#x76EE;&#x5F55;&#x7ED3;&#x6784;&#x5982;&#x4E0B;&#x56FE;&#xFF1A;&#x65B0;&#x5EFA;&#x4E00;&#x4E2A;&#x7C7B;&#xFF0C;JpegUtils&#xFF0C;&#x58F0;&#x660E;native&#x65B9;&#x6CD5;1234567public class JpegUtils { static { System.loadLibrary(&quot;native-lib&quot;); } public static native boolean compressBitmap(Bitmap bitmap, int width, int height, String fileName, int quality);} &#x5728;&#x65B0;&#x5EFA;&#x7684;&#x65B9;&#x6CD5;&#x4E0A;&#x76F4;&#x63A5;&#x751F;&#x6210;c++&#x65B9;&#x6CD5;&#x3002;&#x628A;&#x521A;&#x624D;jpeg&#x5E93;&#x7684;&#x5934;&#x6587;&#x4EF6;&#x5BFC;&#x5165;&#x5230;cpp\\include&#x76EE;&#x5F55;&#x4E0B;&#x3002;&#x6211;&#x53EA;&#x4FDD;&#x7559;&#x4E86;android&#x4E0B;&#x9762;&#x7684;&#x5934;&#x6587;&#x4EF6;&#x548C;&#x5176;&#x4ED6;&#x7684;.h&#x4EE5;&#x53CA;.c&#x6587;&#x4EF6;&#xFF0C;&#x5176;&#x5B9E;&#x8FD9;&#x91CC;&#x9762;&#x6709;&#x65E0;&#x7528;&#x7684;&#xFF0C;&#x4F46;&#x662F;&#x5177;&#x4F53;&#x4E0D;&#x6E05;&#x695A;&#xFF0C;&#x6240;&#x4EE5;&#x76F4;&#x63A5;&#x5BFC;&#x5165;&#x4E86;&#x3002; jpeg&#x538B;&#x7F29;&#x7684;&#x6B65;&#x9AA4;1&#x3001;&#x5C06;Android&#x7684;bitmap&#x89E3;&#x7801;&#x5E76;&#x8F6C;&#x6362;&#x4E3A;RGB&#x6570;&#x636E;2&#x3001;&#x4E3A;JPEG&#x5BF9;&#x8C61;&#x5206;&#x914D;&#x7A7A;&#x95F4;&#x5E76;&#x521D;&#x59CB;&#x5316;3&#x3001;&#x6307;&#x5B9A;&#x538B;&#x7F29;&#x6570;&#x636E;&#x6E90;4&#x3001;&#x83B7;&#x53D6;&#x6587;&#x4EF6;&#x4FE1;&#x606F;5&#x3001;&#x4E3A;&#x538B;&#x7F29;&#x8BBE;&#x5B9A;&#x53C2;&#x6570;&#xFF0C;&#x5305;&#x62EC;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#xFF0C;&#x989C;&#x8272;&#x7A7A;&#x95F4;6&#x3001;&#x5F00;&#x59CB;&#x538B;&#x7F29;7&#x3001;&#x538B;&#x7F29;&#x5B8C;&#x6BD5;8&#x3001;&#x91CA;&#x653E;&#x8D44;&#x6E90;&#x5728;native-lib&#x6587;&#x4EF6;&#x4E2D;&#x8FDB;&#x884C;&#x4EE3;&#x7801;&#x7F16;&#x5199;123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111extern &quot;C&quot;JNIEXPORT jboolean JNICALLJava_com_nick_compress_JpegUtils_compressBitmap(JNIEnv *env, jclass type, jobject bitmap, jint width, jint height, jstring fileName, jint quality) { AndroidBitmapInfo infoColor; BYTE *pixelColor; BYTE *data; BYTE *tempData; const char *filename = env-&gt;GetStringUTFChars(fileName, 0); if ((AndroidBitmap_getInfo(env, bitmap, &amp;infoColor)) &lt; 0) { LOGE(&quot;&#x89E3;&#x6790;&#x9519;&#x8BEF;&quot;); return false; } if ((AndroidBitmap_lockPixels(env, bitmap, (void **) &amp;pixelColor)) &lt; 0) { LOGE(&quot;&#x52A0;&#x8F7D;&#x5931;&#x8D25;&quot;); return false; } BYTE r, g, b; int color; data = (BYTE *) malloc(width * height * 3); tempData = data; for (int i = 0; i &lt; height; i++) { for (int j = 0; j &lt; width; j++) { color = *((int *) pixelColor); r = ((color &amp; 0x00FF0000) &gt;&gt; 16);//&#x4E0E;&#x64CD;&#x4F5C;&#x83B7;&#x5F97;rgb&#xFF0C;&#x53C2;&#x8003;java Color&#x5B9A;&#x4E49;alpha color &gt;&gt;&gt; 24 red (color &gt;&gt; 16) &amp; 0xFF g = ((color &amp; 0x0000FF00) &gt;&gt; 8); b = color &amp; 0X000000FF; *data = b; *(data + 1) = g; *(data + 2) = r; data += 3; pixelColor += 4; } } AndroidBitmap_unlockPixels(env, bitmap); int resultCode = generateJPEG(tempData, width, height, quality, filename, true); free(tempData); if (resultCode == 0) { return false; } return true;}extern &quot;C&quot;//&#x56FE;&#x7247;&#x538B;&#x7F29;&#x65B9;&#x6CD5;int generateJPEG(BYTE *data, int w, int h, int quality, const char *outfilename, jboolean optimize) { int nComponent = 3; struct jpeg_compress_struct jcs; struct jpeg_error_mgr jem; jcs.err = jpeg_std_error(&amp;jem); //&#x4E3A;JPEG&#x5BF9;&#x8C61;&#x5206;&#x914D;&#x7A7A;&#x95F4;&#x5E76;&#x521D;&#x59CB;&#x5316; jpeg_create_compress(&amp;jcs); //&#x83B7;&#x53D6;&#x6587;&#x4EF6;&#x4FE1;&#x606F; FILE *f = fopen(outfilename, &quot;wb&quot;); if (f == NULL) { return 0; } //&#x6307;&#x5B9A;&#x538B;&#x7F29;&#x6570;&#x636E;&#x6E90; jpeg_stdio_dest(&amp;jcs, f); jcs.image_width = w;//image_width-&gt;JDIMENSION-&gt;typedef unsigned int jcs.image_height = h; jcs.arith_code = false; //input_components&#x4E3A;1&#x4EE3;&#x8868;&#x7070;&#x5EA6;&#x56FE;&#xFF0C;&#x5728;&#x7B49;&#x4E8E;3&#x65F6;&#x4EE3;&#x8868;&#x5F69;&#x8272;&#x4F4D;&#x56FE;&#x56FE;&#x50CF; jcs.input_components = nComponent; if (nComponent == 1) //in_color_space&#x4E3A;JCS_GRAYSCALE&#x8868;&#x793A;&#x7070;&#x5EA6;&#x56FE;&#xFF0C;&#x5728;&#x7B49;&#x4E8E;JCS_RGB&#x65F6;&#x4EE3;&#x8868;&#x5F69;&#x8272;&#x4F4D;&#x56FE;&#x56FE;&#x50CF; jcs.in_color_space = JCS_GRAYSCALE; else jcs.in_color_space = JCS_RGB; jpeg_set_defaults(&amp;jcs); //optimize_coding&#x4E3A;TRUE&#xFF0C;&#x5C06;&#x4F1A;&#x4F7F;&#x5F97;&#x538B;&#x7F29;&#x56FE;&#x50CF;&#x8FC7;&#x7A0B;&#x4E2D;&#x57FA;&#x4E8E;&#x56FE;&#x50CF;&#x6570;&#x636E;&#x8BA1;&#x7B97;&#x54C8;&#x5F17;&#x66FC;&#x8868;&#xFF0C;&#x7531;&#x4E8E;&#x8FD9;&#x4E2A;&#x8BA1;&#x7B97;&#x4F1A;&#x663E;&#x8457;&#x6D88;&#x8017;&#x7A7A;&#x95F4;&#x548C;&#x65F6;&#x95F4;&#xFF0C;&#x9ED8;&#x8BA4;&#x503C;&#x88AB;&#x8BBE;&#x7F6E;&#x4E3A;FALSE&#x3002; jcs.optimize_coding = optimize; //&#x4E3A;&#x538B;&#x7F29;&#x8BBE;&#x5B9A;&#x53C2;&#x6570;&#xFF0C;&#x5305;&#x62EC;&#x56FE;&#x50CF;&#x5927;&#x5C0F;&#xFF0C;&#x989C;&#x8272;&#x7A7A;&#x95F4; jpeg_set_quality(&amp;jcs, quality, true); //&#x5F00;&#x59CB;&#x538B;&#x7F29; jpeg_start_compress(&amp;jcs, TRUE); JSAMPROW row_pointer[1];//JSAMPROW&#x5C31;&#x662F;&#x4E00;&#x4E2A;&#x5B57;&#x7B26;&#x578B;&#x6307;&#x9488; &#x5B9A;&#x4E49;&#x4E00;&#x4E2A;&#x53D8;&#x91CF;&#x5C31;&#x7B49;&#x4EF7;&#x4E8E;=========unsigned char *temp int row_stride; row_stride = jcs.image_width * nComponent; while (jcs.next_scanline &lt; jcs.image_height) { row_pointer[0] = &amp;data[jcs.next_scanline * row_stride]; //&#x5199;&#x5165;&#x6570;&#x636E; http://www.cnblogs.com/darkknightzh/p/4973828.html jpeg_write_scanlines(&amp;jcs, row_pointer, 1); } //&#x538B;&#x7F29;&#x5B8C;&#x6BD5; jpeg_finish_compress(&amp;jcs); //&#x91CA;&#x653E;&#x8D44;&#x6E90; jpeg_destroy_compress(&amp;jcs); fclose(f); return 1;} &#x8FD9;&#x6BB5;&#x4EE3;&#x7801;&#x6BD4;&#x8F83;&#x591A;&#xFF0C;&#x4F46;&#x662F;&#x8FD9;&#x662F;&#x5F88;&#x5E38;&#x7528;&#x7684;jpeg&#x5E93;&#x7684;&#x4F7F;&#x7528;&#xFF0C;&#x7F51;&#x4E0A;&#x89E3;&#x91CA;&#x6BD4;&#x8F83;&#x591A;&#xFF0C;&#x6211;&#x8FD9;&#x91CC;&#x4E5F;&#x8FDB;&#x884C;&#x4E86;&#x8F83;&#x8BE6;&#x7EC6;&#x7684;&#x6CE8;&#x91CA;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x8FC7;&#x591A;&#x7684;&#x63CF;&#x8FF0;&#x3002;OK&#xFF0C;&#x4EE3;&#x7801;&#x7684;&#x7F16;&#x5199;&#x5C31;&#x5230;&#x8FD9;&#x91CC;&#xFF0C;&#x70B9;&#x51FB;&#x8FD0;&#x884C;&#x3002;&#x2014;&#x2014;&#x5D29;&#x6492;&#x5361;&#x62C9;&#x5361;&#xFF0C;&#x679C;&#x7136;&#x6CA1;&#x80FD;&#x8FD0;&#x884C;&#x6210;&#x529F;&#x3002;&#x663E;&#x793A;&#x597D;&#x591A;undifined reference&#xFF0C;&#x719F;&#x6089;NDK&#x7684;&#x90FD;&#x77E5;&#x9053;&#x6211;&#x4EEC;&#x9700;&#x8981;&#x5728;mk&#x6587;&#x4EF6;&#x4E2D;&#x53BB;&#x5B9A;&#x4E49;&#x8FD9;&#x4E9B;&#x4F7F;&#x7528;&#x5230;&#x7684;&#x5934;&#x6587;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x6211;&#x4EEC;&#x9879;&#x76EE;&#x662F;&#x4F7F;&#x7528;&#x7684;Cmake&#x5DE5;&#x5177;&#x8FDB;&#x884C;&#x7F16;&#x8BD1;&#xFF0C;&#x6240;&#x4EE5;&#x9700;&#x8981;&#x5728;CMakelist.txt&#x4E2D;&#x53BB;&#x5B9A;&#x4E49;&#x6211;&#x4EEC;&#x7528;&#x5230;&#x7684;&#x5E93;&#x53CA;&#x5934;&#x6587;&#x4EF6;CMakelist.txt 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253# Sets the minimum version of CMake required to build the native# library. You should either keep the default value or only pass a# value of 3.4.0 or lower.cmake_minimum_required(VERSION 3.4.1)# Creates and names a library, sets it as either STATIC# or SHARED, and provides the relative paths to its source code.# You can define multiple libraries, and CMake builds it for you.# Gradle automatically packages shared libraries with your APK.add_library( # Sets the name of the library. native-lib # Sets the library as a shared library. SHARED # Provides a relative path to your source file(s). # Associated headers in the same location as their source # file are automatically included. src/main/cpp/native-lib.cpp )#include &#x8FD9;&#x4E2A;&#x76EE;&#x5F55;&#x4E0B;&#x6240;&#x6709;&#x7684;&#x6587;&#x4EF6;include_directories(src/main/cpp/include)#&#x5916;&#x90E8;&#x5BFC;&#x5165;jpeg&#x8FD9;&#x4E2A;&#x5E93;add_library(jpeg SHARED IMPORTED )#&#x8FD9;&#x53E5;&#x8BDD;&#x662F;jpeg&#x5BF9;&#x5E94;&#x7684;so&#x6587;&#x4EF6;,so&#x6587;&#x4EF6;&#x662F;&#x653E;&#x5230;ibs&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x5939;&#x4E2D;(&#x76F8;&#x5BF9;&#x4E0E;cpp&#x8FD9;&#x4E2A;&#x6587;&#x4EF6;&#x7684;&#x4F4D;&#x7F6E;)set_target_properties(jpeg PROPERTIES IMPORTED_LOCATION ../../../../libs/armeabi/libjpeg.so)# Searches for a specified prebuilt library and stores the path as a# variable. Because system libraries are included in the search path by# default, you only need to specify the name of the public NDK library# you want to add. CMake verifies that the library exists before# completing its build.find_library( # Sets the name of the path variable. log-lib # Specifies the name of the NDK library that # you want CMake to locate. log )# Specifies libraries CMake should link to your target library. You# can link multiple libraries, such as libraries you define in the# build script, prebuilt third-party libraries, or system libraries.target_link_libraries( # Specifies the target library. native-lib # Links the target library to the log library # included in the NDK. jpeg #jnigraphics&#x8FD9;&#x4E2A;&#x662F;android&#x4E0B;&#x9762;&#x7684;bitmap.h&#x5BF9;&#x5E94;&#x7684;&#x5E93; jnigraphics ${log-lib}) &#x7528;AS&#x53BB;&#x5F00;&#x53D1;NDK&#x6700;&#x96BE;&#x7684;&#x5730;&#x65B9;&#x5E76;&#x4E0D;&#x662F;&#x4EC0;&#x4E48;&#x4EE3;&#x7801;&#xFF0C;&#x800C;&#x662F;&#x8FD9;&#x4E2A;CMakelist&#x6587;&#x4EF6;&#x3002;&#x5988;&#x86CB;&#x60F3;&#x60F3;&#x6211;&#x7F51;&#x4E0A;&#x627E;&#x4E86;n&#x4E45;&#xFF0C;&#x771F;&#x7684;&#x8D44;&#x6599;&#x592A;&#x5C11;&#x4E86;&#x3002;NND&#xFF01;&#x6709;&#x4E86;&#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x5C31;&#x53EF;&#x4EE5;&#x6210;&#x529F;&#x7684;&#x8FD0;&#x884C;&#x4E86;&#xFF0C;&#x6211;&#x628A;&#x4EE3;&#x7801;&#x653E;&#x5230;&#x4E86;Github&#x4E0A;&#xFF0C;&#x9700;&#x8981;&#x7684;&#x53EF;&#x4EE5;&#x4E0B;&#x4E0B;&#x6765;&#x770B;&#x770B;&#x3002; 5.&#x6700;&#x7EC8;&#x6548;&#x679C; &#x539F;&#x56FE;&#x548C;&#x8BE6;&#x60C5;&#xFF1A; &#x538B;&#x7F29;&#x540E;&#x7684;&#x56FE;&#x7247;&#x548C;&#x8BE6;&#x60C5;&#xFF1A;","tags":[]},{"title":"Android mvp以及Rxjava和Retrofit框架的搭建","date":"2017-02-21T16:40:13.397Z","path":"2017/02/22/mvp/","text":"1. &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;mvp&#xFF1F; &#x5728;&#x4F20;&#x7EDF;&#x7684;MVC&#x7684;&#x67B6;&#x6784;&#x4E2D;&#xFF0C;&#x6211;&#x4EEC;&#x6240;&#x4F7F;&#x7528;&#x7684;View&#x901A;&#x5E38;&#x6307;&#x7684;&#x662F;View&#xFF08;layout&#x5E03;&#x5C40;&#xFF09;&#xFF0C;Controller&#x5219;&#x4E3A;Activity&#x3002;&#x4F46;&#x662F;Activity&#x4F5C;&#x4E3A;&#x4E0E;&#x7528;&#x6237;&#x4EA4;&#x4E92;&#x7684;&#x754C;&#x9762;&#x5C55;&#x793A;&#xFF0C;Controller&#x548C;View&#x76F8;&#x4E92;&#x8026;&#x5408;&#xFF0C;&#x4F7F;&#x5F97;&#x4EE3;&#x7801;&#x770B;&#x8D77;&#x6765;&#x5C42;&#x6B21;&#x5E76;&#x6CA1;&#x6709;&#x90A3;&#x4E48;&#x5206;&#x660E;&#x3002;&#x800C;MVP&#x6A21;&#x5F0F;&#x53EF;&#x4EE5;&#x8BA9;&#x663E;&#x793A;&#x754C;&#x9762;&#x548C;&#x6570;&#x636E;&#x5206;&#x79BB;&#xFF0C;&#x5F00;&#x53D1;&#x7684;&#x5E94;&#x7528;&#x53EF;&#x4EE5;&#x5206;&#x79BB;&#x81F3;&#x5C11;&#x4E09;&#x5C42;&#xFF0C;&#x8FD9;&#x6837;&#x4E5F;&#x53EF;&#x4EE5;&#x8FDB;&#x884C;&#x72EC;&#x7ACB;&#x6D4B;&#x8BD5;&#x3002;&#x6709;&#x4E86;MVP&#x5C31;&#x53EF;&#x4EE5;&#x4ECE;Activity&#x4E2D;&#x5206;&#x79BB;&#x5927;&#x90E8;&#x5206;&#x4EE3;&#x7801;&#xFF0C;&#x800C;&#x4E14;&#x4E0D;&#x7528;&#x5355;&#x5143;&#x6D4B;&#x8BD5;&#x53EF;&#x4EE5;&#x5BF9;&#x6BCF;&#x4E2A;&#x6A21;&#x5757;&#x8FDB;&#x884C;&#x5355;&#x72EC;&#x6D4B;&#x8BD5;&#x4E86;&#x3002; 2. &#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;Rxjava&#xFF1F; &#x5173;&#x4E8E;&#x4E3A;&#x4EC0;&#x4E48;&#x8981;&#x4F7F;&#x7528;Rxjava&#xFF0C;&#x8BB8;&#x591A;&#x4EBA;&#x90FD;&#x7ED9;&#x51FA;&#x4E86;&#x89E3;&#x91CA;&#x3002;&#x6211;&#x4EEC;&#x4E00;&#x822C;&#x5199;&#x7684;&#x7A0B;&#x5E8F; &#x7EDF;&#x79F0;&#x4E3A;&#x547D;&#x4EE4;&#x5F0F;&#x7A0B;&#x5E8F;&#xFF0C;&#x662F;&#x4EE5;&#x6D41;&#x7A0B;&#x4E3A;&#x6838;&#x5FC3;&#x7684;&#xFF0C;&#x6BCF;&#x4E00;&#x884C;&#x4EE3;&#x7801;&#x5B9E;&#x9645;&#x4E0A;&#x90FD;&#x662F;&#x673A;&#x5668;&#x5B9E;&#x9645;&#x4E0A;&#x8981;&#x6267;&#x884C;&#x7684;&#x6307;&#x4EE4;&#x3002;&#x800C;Rxjava&#x8FD9;&#x6837;&#x7684;&#x7F16;&#x7A0B;&#x98CE;&#x683C;&#xFF0C;&#x79F0;&#x4E3A;&#x51FD;&#x6570;&#x54CD;&#x5E94;&#x5F0F;&#x7F16;&#x7A0B;&#x3002;&#x51FD;&#x6570;&#x54CD;&#x5E94;&#x5F0F;&#x7F16;&#x7A0B;&#x662F;&#x4EE5;&#x6570;&#x636E;&#x6D41;&#x4E3A;&#x6838;&#x5FC3;&#xFF0C;&#x5904;&#x7406;&#x6570;&#x636E;&#x7684;&#x8F93;&#x5165;&#xFF0C;&#x5904;&#x7406;&#x4EE5;&#x53CA;&#x8F93;&#x51FA;&#x7684;&#x3002;&#x8FD9;&#x91CC;&#x7684;&#x54CD;&#x5E94;&#x5F0F;&#x7F16;&#x7A0B;&#x5373;&#x4E3A;Rxjava&#x7684;&#x6838;&#x5FC3;&#x8981;&#x70B9;&#xFF0C;Rxjava&#x901A;&#x8FC7;&#x6570;&#x636E;&#x7684;&#x6D41;&#x52A8;&#xFF0C;&#x4EE5;&#x53CA;&#x5404;&#x79CD;&#x53D8;&#x6362;&#xFF08;map&#x3001;flatmap&#x3001;lift&#xFF09;&#x4F7F;&#x5F97;&#x6570;&#x636E;&#x6839;&#x636E;&#x4E0D;&#x540C;&#x7684;&#x9700;&#x6C42;&#x800C;&#x663E;&#x793A;&#x4E0D;&#x540C;&#x7684;&#x7ED3;&#x679C;&#x3002;&#x5F53;&#x7136;&#x4E86;&#xFF0C;&#x5149;&#x8BF4;&#x7684;&#x8BDD;&#x53EF;&#x80FD;&#x6C38;&#x8FDC;&#x4E5F;&#x4F53;&#x4F1A;&#x4E0D;&#x5230;&#x8FD9;&#x79CD;&#x53D8;&#x6362;&#x5E26;&#x7ED9;&#x6211;&#x4EEC;&#x7684;&#x5FEB;&#x611F;&#x3002;&#x53EF;&#x4EE5;&#x53C2;&#x8003;&#x8FD9;&#x7BC7;&#x6587;&#x7AE0;&#xFF0C;&#x8FD9;&#x91CC;&#x9762;&#x8BE6;&#x7EC6;&#x8BB2;&#x89E3;&#x4E86;Rxjava&#x7684;&#x65B9;&#x4FBF;&#x6027;&#xFF0C;&#x8FD9;&#x91CC;&#x5C31;&#x4E0D;&#x505A;&#x8FC7;&#x591A;&#x7684;&#x8D58;&#x8FF0;&#x3002; 3. &#x6846;&#x67B6;&#x642D;&#x5EFA;&#x5206;&#x6790; mvp&#x7684;&#x67B6;&#x6784;&#x56FE; &#x6839;&#x636E;&#x67B6;&#x6784;&#x56FE;&#x5206;&#x6790;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x770B;&#x51FA;&#xFF0C;View&#x548C;Model&#x4E4B;&#x95F4;&#x7684;&#x6570;&#x636E;&#x4EA4;&#x4E92;&#x90FD;&#x901A;&#x8FC7;&#x4E86;&#x4E00;&#x4E2A;&#x4E2D;&#x95F4;&#x4EF6;Presenter&#xFF0C;&#x6240;&#x4EE5;&#x8FD9;&#x4E2A;&#x4E2D;&#x95F4;&#x4EF6;Presenter&#x5C31;&#x9700;&#x8981;&#x5305;&#x542B;&#x8FD9;&#x4E9B;&#x4EA4;&#x4E92;&#x7684;&#x6240;&#x6709;&#x903B;&#x8F91;&#x64CD;&#x4F5C;&#x3002;&#x6211;&#x4EEC;&#x7684;View&#xFF08;&#x8FD9;&#x91CC;&#x5E94;&#x8BE5;&#x6307;&#x7684;&#x662F;Activity&#xFF09;&#x901A;&#x8FC7;Presenter&#x6765;&#x8FDB;&#x884C;&#x9875;&#x9762;&#x6570;&#x636E;&#x7684;&#x5404;&#x79CD;&#x64CD;&#x4F5C;&#x3002; 4. Rxjava&#x548C;Retrofit&#x6DF7;&#x5408;&#x4F7F;&#x7528;&#x7684;&#x4F18;&#x70B9; Retrofit&#x4F5C;&#x4E3A;&#x5F53;&#x524D;&#x6D41;&#x884C;&#x7684;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#x6846;&#x67B6;&#xFF0C;&#x5355;&#x72EC;&#x4F7F;&#x7528;&#x7684;&#x8BDD;&#x4E5F;&#x6CA1;&#x6709;&#x95EE;&#x9898;&#x3002;1234567891011apiService.getIp2(&quot;63.223.108.42&quot;).enqueue(new Callback&lt;IpModel&gt;() { @Override public void onResponse(Call&lt;IpModel&gt; call, Response&lt;IpModel&gt; response) { } @Override public void onFailure(Call&lt;IpModel&gt; call, Throwable t) { }}); &#x4E0A;&#x9762;&#x7684;&#x4EE3;&#x7801;&#x53EA;&#x4F7F;&#x7528;&#x4E86;Retrofit&#x8FDB;&#x884C;&#x7F51;&#x7EDC;&#x8BF7;&#x6C42;&#xFF0C;&#x6211;&#x4EEC;&#x53EA;&#x9700;&#x8981;&#x8FDB;&#x884C;&#x7B80;&#x5355;&#x7684;&#x5C01;&#x88C5;&#x5C31;&#x53EF;&#x4EE5;&#x5F88;&#x597D;&#x7684;&#x4F7F;&#x7528;&#x4E86;&#x3002;&#x90A3;&#x4E48;&#x95EE;&#x9898;&#x6765;&#x4E86;~Rxjava&#x548C;Retrofit&#x6DF7;&#x5408;&#x4F7F;&#x7528;&#x7684;&#x4F18;&#x70B9;&#x5230;&#x5E95;&#x662F;&#x4EC0;&#x4E48;&#x5462;&#xFF1F;Rxjava&#x4F5C;&#x4E3A;&#x54CD;&#x5E94;&#x5F0F;&#x7F16;&#x7A0B;&#xFF0C;&#x5176;&#x6700;&#x5927;&#x7684;&#x5999;&#x5904;&#x5728;&#x4E8E;&#x6570;&#x636E;&#x7684;&#x53D8;&#x6362;&#x4EE5;&#x53CA;&#x7EBF;&#x7A0B;&#x7684;&#x5207;&#x6362;&#x3002;&#x5C31;&#x7528;&#x6211;&#x4E0A;&#x9762;&#x4F8B;&#x5B50;&#x6765;&#x8BF4;&#xFF0C;&#x5982;&#x679C;&#x6211;&#x9700;&#x8981;&#x7684;&#x662F;&#x4E00;&#x4E2A; List&lt; IpModel&gt;&#xFF0C;&#x800C;&#x4E14;&#x6211;&#x4EEC;&#x8FD8;&#x9700;&#x8981;&#x5BF9;IpModel&#x8FDB;&#x884C;&#x7B5B;&#x9009;&#xFF0C;&#x90A3;&#x4E48;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x901A;&#x8FC7;Map&#x53D8;&#x6362;&#x8FDB;&#x884C;&#x5BF9;IpModel&#x7684;&#x7B5B;&#x9009;&#xFF0C;&#x7136;&#x540E;&#x628A;&#x7ED3;&#x679C;&#x53D1;&#x52A8;&#x5230;&#x4E0B;&#x4E00;&#x6B65;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x8FD9;&#x6837;&#x5927;&#x5927;&#x63D0;&#x9AD8;&#x6211;&#x4EEC;&#x7684;&#x4EE3;&#x7801;&#x53EF;&#x8BFB;&#x6027;&#x3002;123456789101112131415Observable.just(student1, student2, student2) //&#x4F7F;&#x7528;map&#x8FDB;&#x884C;&#x8F6C;&#x6362;&#xFF0C;&#x53C2;&#x6570;1&#xFF1A;&#x8F6C;&#x6362;&#x524D;&#x7684;&#x7C7B;&#x578B;&#xFF0C;&#x53C2;&#x6570;2&#xFF1A;&#x8F6C;&#x6362;&#x540E;&#x7684;&#x7C7B;&#x578B; .map(new Func1&lt;Student, String&gt;() { @Override public String call(Student i) { String name = i.getName();//&#x83B7;&#x53D6;Student&#x5BF9;&#x8C61;&#x4E2D;&#x7684;name return name;//&#x8FD4;&#x56DE;name } }) .subscribe(new Action1&lt;String&gt;() { @Override public void call(String s) { nameList.add(s); } }); 5. &#x6846;&#x67B6;&#x7684;&#x76EE;&#x5F55;&#x7ED3;&#x6784; &#x76EE;&#x5F55;&#x7ED3;&#x6784;&#x5982;&#x4E0B;&#xFF1A;&#x5305;&#x7684;&#x547D;&#x540D;&#x6211;&#x662F;&#x6839;&#x636E;&#x7EC4;&#x4EF6;&#x540D;&#x79F0;&#x6765;&#x547D;&#x540D;&#x7684;&#x3002; 6.&#x9879;&#x76EE;&#x5730;&#x5740; &#x6211;&#x5C06;&#x9879;&#x76EE;&#x653E;&#x5230;&#x4E86;Github&#x4E0A;&#x9762;&#xFF0C;&#x6B22;&#x8FCE;&#x6765;&#x8BA8;&#x8BBA;&#x3002;&#x70B9;&#x51FB;&#x8FD9;&#x91CC;&#x8FDB;&#x5165;","tags":[]},{"title":"再识数据结构绕不过去的坎——值传递、指针传递、引用传递","date":"2017-02-15T12:52:29.041Z","path":"2017/02/15/params/","text":"1. &#x6982;&#x5FF5; &#x503C;&#x4F20;&#x9012;&#xFF1A;&#x6307;&#x5728;&#x8C03;&#x7528;&#x51FD;&#x6570;&#x65F6;&#x5C06;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x590D;&#x5236;&#x4E00;&#x4EFD;&#x4F20;&#x9012;&#x5230;&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x8FD9;&#x6837;&#x5728;&#x51FD;&#x6570;&#x4E2D;&#x5982;&#x679C;&#x5BF9;&#x53C2;&#x6570;&#x8FDB;&#x884C;&#x4FEE;&#x6539;&#xFF0C;&#x5C06;&#x4E0D;&#x4F1A;&#x5F71;&#x54CD;&#x5230;&#x5B9E;&#x9645;&#x53C2;&#x6570;&#x3002; &#x6307;&#x9488;&#x4F20;&#x9012;&#xFF1A;&#x53EF;&#x4EE5;&#x6539;&#x53D8;&#x6307;&#x9488;&#x6307;&#x5411;&#x5185;&#x5BB9;&#x7684;&#x503C;&#xFF0C;&#x4F46;&#x662F;&#x4E0D;&#x80FD;&#x6539;&#x53D8;&#x6307;&#x9488;&#x672C;&#x8EAB;&#xFF0C;&#x65E0;&#x9700;&#x590D;&#x5236;&#x5F00;&#x9500;&#x3002;&#x5982;&#x679C;&#x9700;&#x8981;&#x6539;&#x53D8;&#x6307;&#x9488;&#x672C;&#x8EAB;&#xFF0C;&#x53EF;&#x4EE5;&#x4F7F;&#x7528;&#x4E8C;&#x91CD;&#x6307;&#x9488;&#x6216;&#x8005;&#x6307;&#x9488;&#x5F15;&#x7528;&#x3002; &#x5F15;&#x7528;&#x4F20;&#x9012;&#xFF1A;&#x76F4;&#x63A5;&#x5BF9;&#x5F53;&#x524D;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x65E0;&#x9700;&#x590D;&#x5236;&#x5F00;&#x9500;&#x3002; 2. &#x7406;&#x89E3; &#x503C;&#x4F20;&#x9012;&#xFF1A;&#x503C;&#x4F20;&#x9012;&#x662F;&#x6307;&#x4EE5;&#x5C06;&#x5B9E;&#x53C2;&#x7684;&#x503C;&#x4F20;&#x9012;&#x5230;&#x51FD;&#x6570;&#x4E2D;&#xFF0C;&#x5728;&#x51FD;&#x6570;&#x4E2D;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x4F46;&#x662F;&#x6B64;&#x79CD;&#x4F20;&#x9012;&#x4E0D;&#x4F1A;&#x4FEE;&#x6539;&#x5B9E;&#x53C2;&#x7684;&#x503C;&#x3002;&#x51FD;&#x6570;&#x4F53;&#x5185;&#x7684;&#x53C2;&#x6570;&#x53EA;&#x662F;&#x5BF9;&#x6211;&#x4EEC;&#x4F20;&#x5165;&#x53C2;&#x6570;&#x7684;&#x4E00;&#x4E2A;&#x62F7;&#x8D1D;&#xFF0C;&#x5E76;&#x4E0D;&#x662F;&#x6211;&#x4EEC;&#x4F20;&#x5165;&#x7684;&#x53C2;&#x6570;&#x3002;123456789void fun1(int n) { printf(&quot;&#x64CD;&#x4F5C;&#x65F6;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x \\n&quot;, &amp;n); n = n + 10;}int n = 10;printf(&quot;&#x64CD;&#x4F5C;&#x524D;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x\\n&quot;, &amp;n);fun1(n);printf(&quot;&#x64CD;&#x4F5C;&#x540E;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x&#xFF0C;n&#x7684;&#x503C;&#x4E3A;&#xFF1A;%d \\n&quot;, &amp;n, n); &#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A; &#x6307;&#x9488;&#x4F20;&#x9012;&#xFF1A;&#x6307;&#x9488;&#x4F20;&#x9012;&#x662F;&#x6307;&#x51FD;&#x6570;&#x7684;&#x5F62;&#x53C2;&#x662F;&#x6307;&#x9488;&#x7684;&#x5F62;&#x5F0F;&#xFF0C;&#x901A;&#x8FC7;&#x6307;&#x9488;&#x4F20;&#x9012;&#xFF0C;&#x6211;&#x4EEC;&#x53EF;&#x4EE5;&#x4FEE;&#x6539;&#x6307;&#x9488;&#x6307;&#x5411;&#x7684;&#x5730;&#x5740;&#x7684;&#x503C;&#x3002;123456789void fun2(int * n) { printf(&quot;&#x64CD;&#x4F5C;&#x65F6;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x \\n&quot;, n); *n = *n + 10;}int n = 10;printf(&quot;&#x64CD;&#x4F5C;&#x524D;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x\\n&quot;, &amp;n);fun2(&amp;n);//&#x53D6;&#x5730;&#x5740;printf(&quot;&#x64CD;&#x4F5C;&#x540E;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x&#xFF0C;n&#x7684;&#x503C;&#x4E3A;&#xFF1A;%d \\n&quot;, &amp;n, n); &#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A; &#x5F15;&#x7528;&#x4F20;&#x9012;&#xFF1A;&#x76F4;&#x63A5;&#x5BF9;&#x5F53;&#x524D;&#x5BF9;&#x8C61;&#x8FDB;&#x884C;&#x64CD;&#x4F5C;&#xFF0C;&#x65E0;&#x9700;&#x590D;&#x5236;&#x5F00;&#x9500;&#x3002;123456789void fun3(int &amp; n) { printf(&quot;&#x64CD;&#x4F5C;&#x65F6;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x \\n&quot;, &amp;n); n = n + 10;}int n = 10;printf(&quot;&#x64CD;&#x4F5C;&#x524D;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x\\n&quot;, &amp;n);fun3(n);printf(&quot;&#x64CD;&#x4F5C;&#x540E;&#x5730;&#x5740;&#x4E3A;&#xFF1A;%x&#xFF0C;n&#x7684;&#x503C;&#x4E3A;&#xFF1A;%d \\n&quot;, &amp;n, n); &#x8F93;&#x51FA;&#x7ED3;&#x679C;&#x4E3A;&#xFF1A; 3. &#x603B;&#x7ED3; &#x4EE5;&#x524D;&#x5BF9;C/C++&#x4E86;&#x89E3;&#x5E76;&#x4E0D;&#x662F;&#x5F88;&#x6DF1;&#x523B;&#xFF0C;&#x5F53;&#x7136;&#x4E86;&#x4E5F;&#x548C;&#x6700;&#x8FD1;&#x4E00;&#x4E24;&#x5E74;&#x6CA1;&#x6709;&#x63A5;&#x89E6;C/C++&#x6709;&#x5173;&#xFF0C;&#x8BB8;&#x591A;&#x6982;&#x5FF5;&#x6027;&#x7684;&#x4E1C;&#x897F;&#x53C8;&#x8981;&#x91CD;&#x65B0;&#x62FE;&#x8D77;&#x6765;&#xFF0C;&#x52A0;&#x6DF1;&#x5370;&#x8C61;&#x3002;","tags":[]},{"title":"再识数据结构（1）线性表","date":"2017-02-14T10:00:10.083Z","path":"2017/02/14/list/","text":"1. &#x7EBF;&#x6027;&#x8868;&#x7684;&#x5B9A;&#x4E49; &#x7EBF;&#x6027;&#x8868;&#xFF08;linear list&#xFF09;&#x662F;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x7684;&#x4E00;&#x79CD;&#xFF0C;&#x4E00;&#x4E2A;&#x7EBF;&#x6027;&#x8868;&#x662F;n&#x4E2A;&#x5177;&#x6709;&#x76F8;&#x540C;&#x7279;&#x6027;&#x7684;&#x6570;&#x636E;&#x5143;&#x7D20;&#x7684;&#x6709;&#x9650;&#x5E8F;&#x5217;&#x3002;&#x6570;&#x636E;&#x5143;&#x7D20;&#x662F;&#x4E00;&#x4E2A;&#x62BD;&#x8C61;&#x7684;&#x7B26;&#x53F7;&#xFF0C;&#x5176;&#x5177;&#x4F53;&#x542B;&#x4E49;&#x5728;&#x4E0D;&#x540C;&#x7684;&#x60C5;&#x51B5;&#x4E0B;&#x4E00;&#x822C;&#x4E0D;&#x540C;&#x3002; &#x5728;&#x7A0D;&#x590D;&#x6742;&#x7684;&#x7EBF;&#x6027;&#x8868;&#x4E2D;&#xFF0C;&#x4E00;&#x4E2A;&#x6570;&#x636E;&#x5143;&#x7D20;&#x53EF;&#x7531;&#x591A;&#x4E2A;&#x6570;&#x636E;&#x9879;&#xFF08;item&#xFF09;&#x7EC4;&#x6210;&#xFF0C;&#x6B64;&#x79CD;&#x60C5;&#x51B5;&#x4E0B;&#x5E38;&#x628A;&#x6570;&#x636E;&#x5143;&#x7D20;&#x6210;&#x4E3A;&#x8BB0;&#x5F55;&#xFF08;record&#xFF09;&#xFF0C;&#x542B;&#x6709;&#x5927;&#x91CF;&#x8BB0;&#x5F55;&#x7684;&#x7EBF;&#x6027;&#x8868;&#x53C8;&#x79F0;&#x6587;&#x4EF6;&#xFF08;file&#xFF09;&#x3002; &#x7EBF;&#x6027;&#x8868;&#x4E2D;&#x7684;&#x4E2A;&#x6570;$n$&#x5B9A;&#x4E49;&#x4E3A;&#x7EBF;&#x6027;&#x8868;&#x7684;&#x957F;&#x5EA6;&#xFF0C;$n=0$&#x65F6;&#x79F0;&#x4E3A;&#x7A7A;&#x8868;&#x3002;&#x5728;&#x975E;&#x7A7A;&#x8868;&#x4E2D;&#x6BCF;&#x4E2A;&#x6570;&#x636E;&#x5143;&#x7D20;&#x90FD;&#x6709;&#x4E00;&#x4E2A;&#x786E;&#x5B9A;&#x7684;&#x4F4D;&#x7F6E;&#xFF0C;&#x5982;&#x7528;$a_i$&#x8868;&#x793A;&#x6570;&#x636E;&#x5143;&#x7D20;&#xFF0C;&#x5219;i&#x79F0;&#x4E3A;&#x6570;&#x636E;&#x5143;&#x7D20;$a_i$&#x5728;&#x7EBF;&#x6027;&#x8868;&#x4E2D;&#x7684;&#x4F4D;&#x5E8F;&#x3002; &#x7EBF;&#x6027;&#x8868;&#x7684;&#x76F8;&#x90BB;&#x5143;&#x7D20;&#x4E4B;&#x95F4;&#x5B58;&#x5728;&#x7740;&#x5E8F;&#x5076;&#x5173;&#x7CFB;&#x3002;&#x5982;&#x7528;&#xFF08;a1&#xFF0C;&#x2026;&#xFF0C;ai-1&#xFF0C;ai&#xFF0C;ai+1&#xFF0C;&#x2026;&#xFF0C;an&#xFF09;&#x8868;&#x793A;&#x4E00;&#x4E2A;&#x987A;&#x5E8F;&#x8868;&#xFF0C;&#x5219;&#x8868;&#x4E2D;ai-1&#x9886;&#x5148;&#x4E8E;ai&#xFF0C;ai&#x9886;&#x5148;&#x4E8E;ai+1&#xFF0C;&#x79F0;ai-1&#x662F;ai&#x7684;&#x76F4;&#x63A5;&#x524D;&#x9A71;&#x5143;&#x7D20;&#xFF0C;ai+1&#x662F;ai&#x7684;&#x76F4;&#x63A5;&#x540E;&#x7EE7;&#x5143;&#x7D20;&#x3002;&#x5F53;i=1,2&#xFF0C;&#x2026;&#xFF0C;n-1&#x65F6;&#xFF0C;ai&#x6709;&#x4E14;&#x4EC5;&#x6709;&#x4E00;&#x4E2A;&#x76F4;&#x63A5;&#x540E;&#x7EE7;&#xFF0C;&#x5F53;i=2&#xFF0C;3&#xFF0C;&#x2026;&#xFF0C;n&#x65F6;&#xFF0C;ai&#x6709;&#x4E14;&#x4EC5;&#x6709;&#x4E00;&#x4E2A;&#x76F4;&#x63A5;&#x524D;&#x9A71;&#x3002; 2. &#x7EBF;&#x6027;&#x8868;ADT123456789&#x57FA;&#x672C;&#x64CD;&#x4F5C;InitList(&amp;L)//&#x6784;&#x9020;&#x4E00;&#x4E2A;&#x7A7A;&#x7684;&#x7EBF;&#x6027;&#x8868;LDestoryList(&amp;L)//&#x9500;&#x6BC1;&#x7EBF;&#x6027;&#x8868;LClearList(&amp;L)//&#x5C06;L&#x7F6E;&#x4E3A;&#x7A7A;&#x8868;ListEmpty(L)//&#x662F;&#x5426;&#x4E3A;&#x7A7A;&#x8868;ListLength(L)//L&#x4E2D;&#x6570;&#x636E;&#x5143;&#x7D20;&#x7684;&#x4E2A;&#x6570;GetElem(L, i, &amp;e)//&#x7528;e&#x8FD4;&#x56DE;L&#x4E2D;&#x7B2C;i&#x4E2A;&#x5143;&#x7D20;&#x7684;&#x503C;ListInsert(&amp;L, i, e)//&#x5728;L&#x4E2D;&#x7684;&#x7B2C;i&#x4E2A;&#x4F4D;&#x7F6E;&#x63D2;&#x5165;&#x65B0;&#x7684;&#x5143;&#x7D20;eListDelete(&amp;L, i, e)//&#x5220;&#x9664;L&#x4E2D;&#x7684;&#x7B2C;i&#x4E2A;&#x4F4D;&#x7F6E;&#xFF0C;&#x5E76;&#x628A;&#x503C;&#x8D4B;&#x7ED9;e 3. &#x4EE3;&#x7801;&#x5B9E;&#x73B0;&#xFF08;&#x90E8;&#x5206;&#x5B9E;&#x73B0;&#xFF09; InitList(&amp;L) 1234567891011void initListStruct(ListStruct * ls){ ls-&gt;elem = (int *)malloc(DEFAULT_SIZE * sizeof(ls-&gt;elem)); if (ls-&gt;elem == NULL) { exit(OVERFLOW); } ls-&gt;length = 0;} ListInsert(&amp;L, i, e) 1234567891011121314151617181920212223242526void ListInsert(ListStruct *ls, int position, int value){ if (position &lt;= 0 || position &gt; ls-&gt;length) { printf(&quot;&#x8BF7;&#x8F93;&#x5165;&#x6B63;&#x786E;&#x7684;&#x63D2;&#x5165;&#x4F4D;&#x7F6E;&quot;); } else { if (ls-&gt;length % DEFAULT_SIZE == 0)//&#x5982;&#x679C;&#x5F53;&#x524D;list&#x7684;&#x957F;&#x5EA6;&#x548C;&#x9ED8;&#x8BA4;&#x7684;&#x957F;&#x5EA6;&#x76F8;&#x7B49;&#xFF0C;&#x9700;&#x8981;&#x91CD;&#x65B0;&#x5206;&#x914D;&#x5185;&#x5B58; { //&#x91CD;&#x65B0;&#x5206;&#x914D;&#x5185;&#x5B58;&#xFF0C;&#x589E;&#x91CF;&#x4E3A;DEFAULT_SIZE realloc(ls-&gt;elem, DEFAULT_SIZE * (ls-&gt;length / DEFAULT_SIZE + 1) * sizeof(ls-&gt;elem)); } for (int *i = &amp;(ls-&gt;elem[ls-&gt;length - 1]); i &gt;= &amp;(ls-&gt;elem[position - 1]); i--) { *(i + 1) = *i;//&#x5411;&#x540E;&#x79FB; } ls-&gt;elem[position - 1] = value;//&#x63D2;&#x5165;&#x4F4D;&#x7F6E;&#x91CD;&#x65B0;&#x8D4B;&#x503C; ls-&gt;length++;//&#x957F;&#x5EA6;&#x52A0;1 }} ListDelete(&amp;L, i, e) 1234567891011121314151617181920void DeleteElem(ListStruct * ls, int position, int * value){ if (position &lt;= 0 || position &gt; ls-&gt;length) { printf(&quot;&#x8BF7;&#x8F93;&#x5165;&#x6B63;&#x786E;&#x7684;&#x63D2;&#x5165;&#x4F4D;&#x7F6E;&quot;); } else { *value = ls-&gt;elem[position - 1];//&#x5220;&#x9664;&#x7684;&#x5143;&#x7D20;&#x7684;&#x503C; int *p = &amp;ls-&gt;elem[position - 1]; int *q = &amp;ls-&gt;elem[ls-&gt;length - 1]; while (p &lt; q) { *p = *p + 1;//&#x5411;&#x524D;&#x79FB;&#x52A8; p++; } ls-&gt;length--;//&#x957F;&#x5EA6;-1 }} DestoryList(&amp;L) 1234567void DestoryList(ListStruct * ls){ free(ls-&gt;elem);//&#x91CA;&#x653E;&#x7EBF;&#x6027;&#x8868;&#xFF0C;&#x8FD9;&#x91CC;&#x4E0D;&#x80FD;&#x53BB;&#x91CA;&#x653E;ls&#xFF0C;&#x8FD9;&#x4E2A;&#x5185;&#x5B58;&#x5E76;&#x4E0D;&#x662F;&#x6211;&#x4EEC;&#x7533;&#x8BF7;&#x7684; ls-&gt;elem = NULL; ls-&gt;length = 0; printf(&quot;&#x5185;&#x5B58;&#x88AB;&#x91CA;&#x653E;&quot;);} 4. &#x603B;&#x7ED3; &#x5728;&#x8FD9;&#x91CC;&#x6211;&#x4F7F;&#x7528;&#x4E86;C&#x8BED;&#x8A00;&#x6765;&#x5B9E;&#x73B0;&#x90E8;&#x5206;&#x64CD;&#x4F5C;&#xFF0C;&#x603B;&#x7684;&#x6765;&#x8BF4;&#x8FD8;&#x662F;&#x56E0;&#x4E3A;&#x4E4B;&#x524D;&#x5BF9;C&#x8BED;&#x8A00;&#x7684;&#x6050;&#x60E7;&#xFF08;&#x6307;&#x9488;&#x6050;&#x60E7;&#x611F;&#xFF09;&#x3002;&#x4F46;&#x662F;&#x771F;&#x6B63;&#x5DE5;&#x4F5C;&#x4E86;&#x53D1;&#x73B0;&#xFF0C;&#x7ED5;&#x6765;&#x7ED5;&#x53BB;&#x8FD8;&#x662F;&#x7ED5;&#x4E0D;&#x5F00;&#x6307;&#x9488;&#x7684;&#x5404;&#x79CD;&#x64CD;&#x4F5C;&#x3002;&#x4E8E;&#x662F;&#xFF0C;&#x6211;&#x6253;&#x7B97;&#x91CD;&#x65B0;&#x5B66;&#x4E60;&#x6570;&#x636E;&#x7ED3;&#x6784;&#x6765;&#x5DE9;&#x56FA;&#x81EA;&#x5DF1;&#x7684;&#x77E5;&#x8BC6;&#x3002;","tags":[]},{"title":"Android Volley 支持Https（1）","date":"2016-12-23T03:00:12.654Z","path":"2016/12/23/Android-Volley-Https/","text":"&#x76F8;&#x4FE1;&#x5927;&#x90E8;&#x5206;&#x5F00;&#x53D1;&#x8005;&#x90FD;&#x4F1A;&#x9047;&#x5230;Volley&#x5982;&#x4F55;&#x652F;&#x6301;&#x81EA;&#x5B9A;&#x4E49;&#x8BC1;&#x4E66;&#x7684;&#x95EE;&#x9898;&#xFF0C;&#x6700;&#x7B80;&#x5355;&#x7684;&#x529E;&#x6CD5;&#x5C31;&#x662F;&#x652F;&#x6301;&#x6240;&#x6709;&#x7684;SSL&#x8BC1;&#x4E66;&#x3002;&#x4F46;&#x662F;&#x5982;&#x679C;&#x652F;&#x6301;&#x6240;&#x6709;&#x7684;SSL&#x8BC1;&#x4E66;&#x7684;&#x8BDD;&#xFF0C;&#x5C31;&#x5931;&#x53BB;&#x4E86;Https&#x7684;&#x5B89;&#x5168;&#x6027;&#x4E86;&#xFF08;App&#x5728;Google Play&#x4E0A;&#x67B6;&#x4F1A;&#x4E0D;&#x901A;&#x8FC7;&#xFF09;&#x3002; 1.Volley&#x9ED8;&#x8BA4;&#x652F;&#x6301;&#x4E0D;&#x652F;&#x6301;Https&#xFF1F; &#x7B54;&#x6848;&#x662F;&#x652F;&#x6301;&#x7684;&#xFF01;&#x7F51;&#x4E0A;&#x5927;&#x90E8;&#x5206;&#x90FD;&#x8BF4;Volley&#x4E0D;&#x652F;&#x6301;Https&#xFF0C;&#x5176;&#x5B9E;Volley&#x5728;&#x540E;&#x9762;&#x7684;&#x7248;&#x672C;&#x5DF2;&#x7ECF;&#x53EF;&#x4EE5;&#x652F;&#x6301;Https&#x8BF7;&#x6C42;&#x4E86;&#x3002;&#x5177;&#x4F53;&#x554A;&#xFF0C;&#x8FD8;&#x662F;&#x627E;&#x5EA6;&#x5A18;&#x770B;&#x5427;&#xFF0C;&#x8FD9;&#x91CC;&#x4E3B;&#x8981;&#x8BB2;&#x5982;&#x4F55;&#x5B9E;&#x73B0;&#x3002; 2.&#x51C6;&#x5907;&#x5DE5;&#x4F5C; &#x751F;&#x6210;BC&#x8BC1;&#x4E66; Android &#x9700;&#x8981;BC&#x8BC1;&#x4E66;&#xFF0C;&#x800C;Java&#x7684;keytool&#x4E0D;&#x63D0;&#x4F9B;BKS&#x683C;&#x5F0F;&#xFF0C;&#x56E0;&#x6B64;&#x9700;&#x8981;&#x4F7F;&#x7528;&#x5176;&#x4ED6;&#x5DE5;&#x5177;&#x751F;&#x6210;&#x3002; &#x8FD9;&#x91CC;&#x4F7F;&#x7528;Java&#x6269;&#x5C55;&#x7B97;&#x6CD5;&#x548C;&#x8F85;&#x52A9;&#x5DE5;&#x5177;&#xFF08;bcprov-ext-jdk15on-146.jar &#xFF09;&#x6765;&#x751F;&#x6210;BKS&#x6587;&#x4EF6;&#x3002;**&#x5728;&#x8FD9;&#x91CC;&#x8981;&#x8BF4;&#x4E0B;&#xFF0C;&#x6211;&#x662F;&#x7528;&#x4E86;&#x66F4;&#x9AD8;&#x7248;&#x672C;&#x7684;jar&#x6587;&#x4EF6;&#x6765;&#x751F;&#x6210;BKS&#x6587;&#x4EF6;&#xFF0C;&#x4F46;&#x662F;&#x603B;&#x662F;&#x4F1A;&#x51FA;&#x73B0;&#x4E0B;&#x9762;&#x7684;&#x9519;&#x8BEF;&#xFF1A; 1java.lang.ClassNotFoundException: org.bouncycastle.jce.provider.BouncyCastleProvid &#x5982;&#x679C;&#x627E;&#x4E0D;&#x5230;bcprov-ext-jdk15on-146.jar&#xFF0C;&#x53EF;&#x4EE5;&#x4E0B;&#x8F7D;&#xFF0C;&#x63D0;&#x53D6;&#x7801;&#x4E3A;8fvq&#x3002; &#x4E0B;&#x8F7D;&#x5B8C;&#x6210;&#x540E;&#xFF0C;&#x4E0D;&#x7528;&#x8FDB;&#x884C;&#x4EFB;&#x4F55;&#x914D;&#x7F6E;&#x3002;&#x5C06;&#x4E0B;&#x8F7D;&#x7684;jar&#x6587;&#x4EF6;&#x653E;&#x5230;&#x81EA;&#x5DF1;&#x9700;&#x8981;&#x751F;&#x6210;BKS&#x7684;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x547D;&#x4EE4;&#x884C;&#x5DE5;&#x5177;&#x8FDB;&#x5165;&#x6587;&#x4EF6;&#x5939;&#x4E2D;&#xFF0C;&#x4F7F;&#x7528;&#x547D;&#x4EE4;&#xFF1A; 1keytool -importcert -keystore &#x751F;&#x6210;&#x7684;bks&#x6587;&#x4EF6;&#x540D;.bks -file &#x8BC1;&#x4E66;&#x6587;&#x4EF6;.crt -storetype BKS -provider org.bouncycastle.jce.provider.BouncyCastleProvider -providerpath &quot;bcprov-ext-jdk16-146.jar&quot; &#x4E4B;&#x540E;&#x4F1A;&#x51FA;&#x73B0;&#xFF1A;&#xFF0C;&#x8F93;&#x5165;&#x4E24;&#x6B21;&#x5BC6;&#x94A5;&#x53E3;&#x4EE4;&#x5373;&#x53EF;&#x3002; &#x7136;&#x540E;&#x4F1A;&#x63D0;&#x793A;&#x662F;&#x5426;&#x4FE1;&#x4EFB;&#x8F93;&#x5165;y&#x5373;&#x53EF;&#x751F;&#x6210;BKS&#x6587;&#x4EF6;&#x3002; OK&#xFF0C;&#x73B0;&#x5728;&#x5DF2;&#x7ECF;&#x5B8C;&#x6210;&#x4E86;&#x51C6;&#x5907;&#x5DE5;&#x4F5C;&#xFF0C;&#x4E0B;&#x9762;&#x5C31;&#x662F;&#x4FEE;&#x6539;Volley&#x7684;&#x6E90;&#x7801;&#x8FDB;&#x884C;&#x5B9E;&#x73B0;&#x3002; 1&#x6B32;&#x77E5;&#x8BE6;&#x60C5;&#xFF0C;&#x4E14;&#x542C;&#x4E0B;&#x56DE;&#x5206;&#x89E3;&#x3002;","tags":[]}]